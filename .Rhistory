yleft=min(xx),yright=max(xx),ties=min)
cdf(p)
}
computeQuantiles(eusilc$eqIncome,eusilc$rb050, method = "constant", p=.5)
computeQuantiles(eusilc$eqIncome,eusilc$rb050,  p=.5)
des_eusilc_rep <- as.svrepdesign(des_eusilc, type = "bootstrap")
svyarpt.svyrep.design <- function(formula, design, order = .50, percent =.6,...) {
inc <- terms.formula(formula)[[2]]
df <- model.frame(design)
incvar<-df[[as.character(inc)]]
w <- weights(design, "sampling")
quant_val <- computeQuantiles(incvar, w,  p = order)
quant_val <- as.vector(quant_val)
rval <- percent* quant_val
ww<-weights(design,"analysis")
qq <- apply(ww, 2, function(wi) 0.6*computeQuantiles(incvar, wi,p = order))
variance <- svrVar(qq,design$scale,design$rscales, mse=design$mse, coef=rval)
list(value= rval, se=sqrt(variance))
}
svyarpt <-  function( formula , design , ... ){
UseMethod( "svyarpt" , design )
}
svyarpt.survey.design <- function(formula, design, order = .50, percent =.6, h, ncom, comp,...) {
w <- weights(design)
ind<-names(w)
quant_val<- svyquantile(x = formula, design=design,
quantiles = order, method="constant")
quant_val <- as.vector(quant_val)
ARPT <- percent* quant_val
lin_ARPT <- percent * iqalpha(formula = formula, design = design,
alpha = order,h=h, ncom=ncom, comp=FALSE,incvec = NULL)$lin
names(lin_ARPT)<-ind
lin_ARPT_comp<-complete(lin_ARPT, ncom)
if(comp)lin<-lin_ARPT_comp else lin<-lin_ARPT
list(value = ARPT, lin = lin)
}
svyarpt.svyrep.design <- function(formula, design, order = .50, percent =.6,...) {
inc <- terms.formula(formula)[[2]]
df <- model.frame(design)
incvar<-df[[as.character(inc)]]
w <- weights(design, "sampling")
quant_val <- computeQuantiles(incvar, w,  p = order)
quant_val <- as.vector(quant_val)
rval <- percent* quant_val
ww<-weights(design,"analysis")
qq <- apply(ww, 2, function(wi) 0.6*computeQuantiles(incvar, wi,p = order))
variance <- svrVar(qq,design$scale,design$rscales, mse=design$mse, coef=rval)
list(value= rval, se=sqrt(variance))
}
lixo <- svyarpt(~eqIncome, des_eusilc_rep, order = .50, percent =.6)
lixo
install_github("DjalmaPessoa/convey")
search()
computeQuantiles<-function(xx, w, p=quantiles){
if (any(is.na(xx))) return(NA*p)
oo<-order(xx)
cum.w<-cumsum(w[oo])/sum(w)
cdf<-approxfun(cum.w,xx[oo],method="constant", f=1,
yleft=min(xx),yright=max(xx),ties=min)
cdf(p)
}
source('C:/Djalma/convey_copy/tests.R', echo=TRUE)
library(convey)
source('C:/Djalma/convey_copy/tests.R', echo=TRUE)
svyarpr
librar(convey)
library(convey)
svyarpr
library(devtools)
install_github("DjalmaPessoa/convey")
svygini.svyrep.design<- function(formula, design,...){
inc <- terms.formula(formula)[[2]]
df <- model.frame(design)
incvar<-df[[as.character(inc)]]
ComputeGini <- function(x, w){
w <- w[order(x)]
x <- x[order(x)]
N <-  sum(w)
n<- length(x)
T<- sum(x*w)
r <- cumsum(w)
Num <- sum((2*r-1)*x*w)
Den <- N*T
(Num/Den)-1
}
ws <- weights(design, "sampling")
rval <- ComputeGini(incvar, ws)
ww <- weights(design, "analysis")
qq <- apply(ww, 2, function(wi) ComputeGini(incvar, wi))
variance <- svrVar(qq,design$scale,design$rscales, mse = design$mse, coef = rval)
list(value = rval, se = sqrt(variance))
}
des_eusilc_rep <- as.svrepdesign(des_eusilc, type = "bootstrap")
svyarpt(~eqIncome, des_eusilc_rep, order = .50, percent =.6)
svyarpr(~eqIncome, des_eusilc_rep, order = .50, percent =.6)
source('~/GitHub/convey/R/svyarpr.R', echo=TRUE)
svyarpr(~eqIncome, des_eusilc_rep, order = .50, percent =.6)
source('~/GitHub/convey/R/svyrmpg.R', echo=TRUE)
svyrmpg(~eqIncome, des_eusilc_rep, order = .50, percent =.6)
source('~/GitHub/convey/R/svyrmpg.R', echo=TRUE)
svyrmpg(~eqIncome, des_eusilc_rep, order = .50, percent =.6)
source('~/GitHub/convey/R/svyrmpg.R', echo=TRUE)
svyrmpg(~eqIncome, des_eusilc_rep, order = .50, percent =.6)
source('~/GitHub/convey/R/svyqsr.R', echo=TRUE)
svyqsr(~eqIncome, des_eusilc_rep, alpha= .20,)
source('~/GitHub/convey/R/svyqsr.R', echo=TRUE)
svyqsr(~eqIncome, des_eusilc_rep, alpha= .20,)
svyqsr(~eqIncome, des_eusilc_rep, alpha= .20)
source('~/GitHub/convey/R/svyqsr.R', echo=TRUE)
svyqsr(~eqIncome, des_eusilc_rep, alpha= .20)
source('~/GitHub/convey/R/svygini.R', echo=TRUE)
svygini(~eqIncome, des_eusilc_rep)
library(devtools)
install_github("DjalmaPessoa\convey")
install_github("DjalmaPessoa/convey")
install_github("DjalmaPessoa/convey")
install_github("DjalmaPessoa/convey")
source('C:/Djalma/convey_copy/tests.R', echo=TRUE)
install_github("DjalmaPessoa/convey")
install_github("DjalmaPessoa/convey")
install_github("DjalmaPessoa/convey")
source('~/GitHub/convey/tests.R', echo=TRUE)
source('C:/Djalma/convey_copy/tests.R', echo=TRUE)
svyqsr(~eqIncome, des_eusilc_rep, alpha= .20)
test_check("convey")
library(testthat)
test_check("convey")
library(vardpoor)
data(eusilc)
library(survey)
htot <- h_fun(eusilc$eqIncome, eusilc$rb050)
des_eusilc <- svydesign(ids=~db040, weights=~rb050, data=eusilc)
qsr_eulsilc<- svyqsr(~eqIncome, design=des_eusilc, alpha= .20, ncom = nrow(eusilc),
comp=TRUE, invec = eusilc$eqIncome)
qsr_eulsilc<- svyqsr(~eqIncome, design=des_eusilc, alpha= .20, ncom = nrow(eusilc),
comp=TRUE, incvec = eusilc$eqIncome)
install_github("DjalmaPessoa/convey")
library(vardpoor)
data(eusilc)
library(survey)
htot <- h_fun(eusilc$eqIncome, eusilc$rb050)
des_eusilc <- svydesign(ids=~db040, weights=~rb050, data=eusilc)
arpt_eusilc <- svyarpt(~eqIncome, design=des_eusilc, .5, .6, h = htot,
ncom=nrow(eusilc), comp=TRUE)
rmpg_eulsilc<- svyrmpg(~eqIncome, design=des_eusilc, order =.50,
percent = .60,  h = htot, ncom=nrow(eusilc), comp=TRUE,
comp=TRUE, ARPT = arpt_eusilc)
rmpg_eulsilc<- svyrmpg(~eqIncome, design=des_eusilc, order =.50,
percent = .60,  h = htot, ncom=nrow(eusilc), comp=TRUE, ARPT = arpt_eusilc)
install_github("DjalmaPessoa/convey")
install_github("DjalmaPessoa/convey")
survey:::svymean.survey.design
teste_fun<-survey:::svymean.survey.design
args(test_fun)
teste_fun<-survey:::svymean.survey.design
args(teste_fun)
test_fun(~eqIncome, subset(des_eusilc, db04="Tyrol"))
teste_fun(~eqIncome, subset(des_eusilc, db04="Tyrol"))
survey:::svyCprod()
survey:::svyCprod
svyarpt.survey.design <- function(formula, design, order = .50, percent =.6, h, ncom, comp,...) {
w <- weights(design)
ind<-names(w)
quant_val<- svyquantile(x = formula, design=design,
quantiles = order, method="constant")
quant_val <- as.vector(quant_val)
ARPT <- percent* quant_val
lin_ARPT <- percent * iqalpha(formula = formula, design = design,
alpha = order,h=h, ncom=ncom, comp=FALSE,incvec = NULL)$lin
names(lin_ARPT)<-ind
lin_ARPT_comp<-complete(lin_ARPT, ncom)
if(comp)lin<-lin_ARPT_comp else lin<-lin_ARPT
v<-svyCprod(lin/design$prob,design$strata,
design$cluster[[1]], design$fpc,
design$nPSU,design$certainty,design$postStrata)
list(value = ARPT, lin = lin, se=sqrt(v))
}
fun_arptd<- svyby(~eqIncome, by= ~db040, design=des_eusilc, FUN=svyarpt, order = .50, percent =.6,
h= htot,ncom=nrow(des_eusilc$variables), comp=TRUE, deff=FALSE, keep.var=FALSE, keep.names = TRUE)
source('~/GitHub/convey/tests.R', echo=TRUE)
fun_arptw <-  svyarpt(~eqIncome, design=des_eusilc, .5, .6, h=htot,
ncom=nrow(des_eusilc$variables), comp=TRUE)
library(vardpoor)
library(vardpoor)
data(eusilc)
library(survey)
htot <- h_fun(eusilc$eqIncome, eusilc$rb050)
des_eusilc <- svydesign(ids=~db040, weights=~rb050, data=eusilc)
svyarpt(~eqIncome, design=des_eusilc, .5, .6, h = htot, ncom=nrow(eusilc), comp=TRUE)
source('~/GitHub/convey/R/svyarpt.R', echo=TRUE)
svyarpt.survey.design <- function(formula, design, order = .50, percent =.6, h, ncom, comp,...) {
w <- weights(design)
ind<-names(w)
quant_val<- svyquantile(x = formula, design=design,
quantiles = order, method="constant")
quant_val <- as.vector(quant_val)
ARPT <- percent* quant_val
lin_ARPT <- percent * iqalpha(formula = formula, design = design,
alpha = order,h=h, ncom=ncom, comp=FALSE,incvec = NULL)$lin
names(lin_ARPT)<-ind
lin_ARPT_comp<-complete(lin_ARPT, ncom)
if(comp)lin<-lin_ARPT_comp else lin<-lin_ARPT
list(value = ARPT, lin = lin)
}
svyarpt(~eqIncome, design=des_eusilc, .5, .6, h = htot, ncom=nrow(eusilc), comp=TRUE)
install_github("DjalmaPessoa/convey")
ls()
rm?
?rm
rm(list = ls())
library(convey)
source('~/GitHub/convey/tests.R', echo=TRUE)
source('~/GitHub/convey/tests.R', echo=TRUE)
fun_arptw$value
table(fun_arptw$lin)
vardpoor_arptw$value
table(vardpoor_arptw$lin$lin_arpt)
devtools::use_testthat()
devtools::test()
library(convey)
source('~/GitHub/convey/tests.R', echo=TRUE)
source('~/GitHub/convey/tests.R', echo=TRUE)
fun_arptw <-  svyarpt(~eqIncome, design=des_eusilc, .5, .6, h=htot,
ncom=nrow(des_eusilc$variables), comp=TRUE)
str(fun_arptw)
?vcov
svyarpt.svyrep.design <- function(formula, design, order = .50, percent =.6,...) {
inc <- terms.formula(formula)[[2]]
df <- model.frame(design)
incvar<-df[[as.character(inc)]]
w <- weights(design, "sampling")
quant_val <- computeQuantiles(incvar, w,  p = order)
quant_val <- as.vector(quant_val)
rval <- percent* quant_val
ww<-weights(design,"analysis")
qq <- apply(ww, 2, function(wi) 0.6*computeQuantiles(incvar, wi,p = order))
variance <- svrVar(qq,design$scale,design$rscales, mse=design$mse, coef=rval)
list(value= rval, se=sqrt(variance))
}
fun_arptw <-  svyarpt.svyrep.design(~eqIncome, design=des_eusilc, .5, .6, h=htot,
ncom=nrow(des_eusilc$variables), comp=TRUE)
svyarpt.survey.design <- function(formula, design, order = .50, percent =.6, h, ncom, comp,...) {
w <- weights(design)
ind<-names(w)
quant_val<- svyquantile(x = formula, design=design,
quantiles = order, method="constant")
quant_val <- as.vector(quant_val)
ARPT <- percent* quant_val
lin_ARPT <- percent * iqalpha(formula = formula, design = design,
alpha = order,h=h, ncom=ncom, comp=FALSE,incvec = NULL)$lin
names(lin_ARPT)<-ind
lin_ARPT_comp<-complete(lin_ARPT, ncom)
if(comp)lin<-lin_ARPT_comp else lin<-lin_ARPT
attr(ARPT, "statistic")<- "arpt"
attr(ARPT, "var")<-svyCprod(lin/design$prob,design$strata,
design$cluster[[1]], design$fpc,
design$nPSU,design$certainty,design$postStrata)
#list(value = ARPT, lin = lin)
return(ARPT)
}
svyarpt.survey.design <- function(formula, design, order = .50, percent =.6, h, ncom, comp,...) {
w <- weights(design)
ind<-names(w)
quant_val<- svyquantile(x = formula, design=design,
quantiles = order, method="constant")
quant_val <- as.vector(quant_val)
ARPT <- percent* quant_val
lin_ARPT <- percent * iqalpha(formula = formula, design = design,
alpha = order,h=h, ncom=ncom, comp=FALSE,incvec = NULL)$lin
names(lin_ARPT)<-ind
lin_ARPT_comp<-complete(lin_ARPT, ncom)
if(comp)lin<-lin_ARPT_comp else lin<-lin_ARPT
attr(ARPT, "statistic")<- "arpt"
attr(ARPT, "var")<-svyCprod(lin/design$prob,design$strata,
design$cluster[[1]], design$fpc,
design$nPSU,design$certainty,design$postStrata)
#list(value = ARPT, lin = lin)
return(ARPT)
}
fun_arptw <-  svyarpt.survey.design(~eqIncome, design=des_eusilc, .5, .6, h=htot,
ncom=nrow(des_eusilc$variables), comp=TRUE)
svyCprod(eusilc$eqIncome/des_eusilc$prob,des_eusilc$strata,
des_eusilc$cluster[[1]], des_eusilc$fpc,
des_eusilc$nPSU,des_eusilc$certainty,des_eusilc$postStrata)
des_eusilc$nPSU
des_eusilc$nPSU
str(des_eusilc)
svyCprod(eusilc$eqIncome/des_eusilc$prob,des_eusilc$strata,
des_eusilc$cluster[[1]], des_eusilc$fpc,
des_eusilc$nPSU,des_eusilc$certainty,des_eusilc$postStrata)
str(des_eusilc$fpc)
table(des_eusilc$fpc$sampsize)
survey:::svyCprod->teste
library(debug)
mtrace(teste)
teste(eusilc$eqIncome/des_eusilc$prob,des_eusilc$strata,
des_eusilc$cluster[[1]], des_eusilc$fpc,
des_eusilc$nPSU,des_eusilc$certainty,des_eusilc$postStrata)
?svydesign
des_eusilc <- svydesign(ids=~db040, weights=~rb050, data=eusilc)
str(des_eusilc$fpc)
inherits(des_eusilc$fpc,"formula")
library("convey", lib.loc="~/R/win-library/3.2")
library(vardpoor)
data(eusilc)
library(survey)
htot <- h_fun(eusilc$eqIncome, eusilc$rb050)
des_eusilc <- svydesign(ids=~db040, weights=~rb050, data=eusilc)
arpt_eusilc<-svyarpt(~eqIncome, design=des_eusilc, .5, .6, h = htot, ncom=nrow(eusilc), comp=TRUE)
arpr_eulsilc<- svyarpr_lin(~eqIncome, design=des_eusilc, .5, .6, h = htot,
ARPT = arpt_eusilc, ncom=nrow(eusilc), comp=TRUE)
arpr_eulsilc<- svyarpr(~eqIncome, design=des_eusilc, .5, .6, h = htot,
ARPT = arpt_eusilc, ncom=nrow(eusilc), comp=TRUE)
devtools::document()
?svyarpt
devtools::document()
?vsyarpt
devtools::document()
library(vardpoor)
data(eusilc)
library(survey)
htot <- h_fun(eusilc$eqIncome, eusilc$rb050)
des_eusilc <- svydesign(ids=~db040, weights=~rb050, data=eusilc)
svygini(~eqIncome, design=des_eusilc, ncom=nrow(eusilc), comp=TRUE)
library(vardpoor)
data(eusilc)
library(survey)
htot <- h_fun(eusilc$eqIncome, eusilc$rb050)
des_eusilc <- svydesign(ids=~db040, weights=~rb050, data=eusilc)
qsr_eqIncome<- svyqsr(~eqIncome, design=des_eusilc, alpha= .20, ncom = nrow(eusilc),
comp=TRUE, incvec = eusilc$eqIncome)
library(vardpoor)
data(eusilc)
library(survey)
htot <- h_fun(eusilc$eqIncome, eusilc$rb050)
des_eusilc <- svydesign(ids=~db040, weights=~rb050, data=eusilc)
arpt_eqIncome <-svyarpt(~eqIncome, design=des_eusilc, .5, .6, h = htot,
ncom=nrow(eusilc), comp=TRUE)
devtools::document()
?svygini
library(vardpoor)
data(eusilc)
library(survey)
htot <- h_fun(eusilc$eqIncome, eusilc$rb050)
des_eusilc <- svydesign(ids=~db040, weights=~rb050, data=eusilc)
icdf_eqIncome <-icdf(~eqIncome, design=des_eusilc, 20000, ncom=nrow(eusilc), comp=TRUE)
icdf_eqIncome$value
icdf<-function(formula, design, x, ncom, comp, ...){
inc <- terms.formula(formula)[[2]]
df <- model.frame(design)
incvar<-df[[as.character(inc)]]
w <- weights(design)
ind<-names(w)
N <- sum (w)
poor<- (incvar<=x)*1
design <- update(design, poor = poor)
# rate of poor
cdf_fun <- coef(svymean(poor, design))
inf_fun<-(1/N)* ((incvar<=x)-cdf_fun)
names(inf_fun)<-ind
inf_fun_comp<- complete(inf_fun,ncom)
if(comp)lin<-inf_fun_comp else lin<-inf_fun
list(value= cdf_fun, lin=lin)
}
icdf_eqIncome <-icdf(~eqIncome, design=des_eusilc, 20000, ncom=nrow(eusilc), comp=TRUE)
icdf_eqIncome$value
library(vardpoor)
data(eusilc)
library(survey)
htot <- h_fun(eusilc$eqIncome, eusilc$rb050)
des_eusilc <- svydesign(ids=~db040, weights=~rb050, data=eusilc)
iqalpha_eqIncome <-icdf(~eqIncome, design=des_eusilc, .50, ncom=nrow(eusilc),
comp=TRUE, eusilc$eqIncome )
iqalpha_eqIncome$value
iqalpha_eqIncome <-iqalpha(~eqIncome, design=des_eusilc, .50, ncom=nrow(eusilc),
comp=TRUE, eusilc$eqIncome )
iqalpha_eqIncome$value
#' of the library survey
library(vardpoor)
data(eusilc)
library(survey)
htot <- h_fun(eusilc$eqIncome, eusilc$rb050)
des_eusilc <- svydesign(ids=~db040, weights=~rb050, data=eusilc)
isq_eqIncome <-isq(~eqIncome, design=des_eusilc, .80, "sup", htot,
ncom=nrow(eusilc),  eusilc$eqIncome)
isq_eqIncome$value
devtools::document()
? isq
devtools::document()
SE_lin <- function(object, design){
lincomp<- object$lin
lapply(lincomp$statistic.lin,
function(t){
x<- update(design,t=t)
SE(svytotal(~t,design ) )
}
)
}
SE_lin(fun_ginid)
source('~/GitHub/convey/tests.R', echo=TRUE)
source('~/GitHub/convey/tests.R', echo=TRUE)
library(convey,pos=1)
source('~/GitHub/convey/tests.R', echo=TRUE)
svyarpt.survey.design
source('~/GitHub/convey/R/svyarpt.R', echo=TRUE)
source('~/GitHub/convey/tests.R', echo=TRUE)
names(fun_arptw)
fun_arptw <-  svyarpt.survey.design(~eqIncome, design=des_eusilc, .5, .6, h=htot,
ncom=nrow(des_eusilc$variables), comp=TRUE)
str(fun_arptw)
source('~/GitHub/convey/R/svyarpt.R', echo=TRUE)
source('~/GitHub/convey/tests.R', echo=TRUE)
source('~/GitHub/convey/tests.R', echo=TRUE)
SE_lin(fun_ginid)
SE_lin(fun_ginid,des_eusilc )
SE_lin <- function(object, design){
lincomp<- object$lin
list_se<-lapply(lincomp$statistic.lin,
function(t){
x<- update(design,t=t)
SE(svytotal(~t,design ) )
}
)
list_se
}
SE_lin(fun_ginid,des_eusilc )
SE_lin <- function(object, design){
lincomp<- object$lin
list_se<-lapply(lincomp$statistic.lin,
function(t){
x<- update(design,t=t)
SE(svytotal(~t,design ) )
}
)
list_se
}
SE_lin(fun_ginid,des_eusilc )
SE_lin <- function(object, design){
lincomp<- object$lin
list_se<-lapply(lincomp$statistic.lin,
function(t){
x<- update(design,t=t)
SE(svytotal(~t,design ) )
}
)
list_se
}
str(fun_ginid)
SE_lin <- function(object, design){
lincomp<- object$statistic.lin
list_se<-lapply(lincomp,
function(t){
x<- update(design,t=t)
SE(svytotal(~t,design ) )
}
)
list_se
}
SE_lin(fun_ginid,des_eusilc )
SE_lin <- function(object, design){
lincomp<- object$statistic.lin
list_se<-lapply(lincomp,
function(t){
x<- update(design,t=t)
SE(svytotal(~t,design ) )
}
)
names(list_se)<-object[[1]]
list_se
}
SE_lin(fun_ginid,des_eusilc )
SE_lin(fun_giniw,des_eusilc )
str(fun_giniw)
length(fun_giniw)
SE_lin <- function(object, design){
if(length(object)==2){
x<- update(design ,t=object$lin)
return(SE(svytotal(~t,design )))
}
lincomp<- object$statistic.lin
list_se<-lapply(lincomp,
function(t){
x<- update(design,t=t)
SE(svytotal(~t,design ) )
}
)
names(list_se)<-object[[1]]
list_se
}
SE_lin(fun_giniw,des_eusilc )
SE_lin <- function(object, design){
if(length(object)==2){
x<- update(design ,t=object$lin)
res<-SE(svytotal(~t,design ))
}
else{
lincomp<- object$statistic.lin
res<-lapply(lincomp,
function(t){
x<- update(design,t=t)
SE(svytotal(~t,design ) )
}
)
names(res)<-object[[1]]
}
res
}
SE_lin(fun_giniw,des_eusilc )
library(convey)
?svyarpr
devtools::document()
?svyrmpg
