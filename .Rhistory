attr(rval, "var") <- variance
attr(rval, "statistic") <- "qsr"
rval
}
fun_qsrw1 <-  svyqsr1(~eqIncome, des_eusilc, .20)
fun_qsrw1
fun_qsrd<- svyby(~eqIncome, by= ~db040, design=des_eusilc, FUN=svyqsr1, alpha=.20,
deff=FALSE, keep.var=FALSE)
fun_qsrd
library(convey)
library(vardpoor)
data(eusilc)
library(survey)
des_eusilc <- svydesign(ids=~db040, weights=~rb050, data=eusilc)
des_eusilc <- convey_prep( des_eusilc )
qsr_eqIncome<- svyqsr(~eqIncome, design=des_eusilc, alpha= .20)
qsr_eqIncome
library(convey)
library(vardpoor)
data(eusilc)
library(survey)
des_eusilc <- svydesign(ids=~db040, weights=~rb050, data=eusilc)
des_eusilc <- convey_prep( des_eusilc )
qsr_eqIncome<- svyqsr(~eqIncome, design=des_eusilc, alpha= .20)
qsr_eqIncome
library(vardpoor)
data(eusilc)
dati = data.frame(1:nrow(eusilc), eusilc)
colnames(dati)[1] <- "IDd"
library(survey)
# create a design object
des_eusilc <- svydesign(ids = ~db040, weights = ~rb050, data = eusilc)
library(convey)
des_eusilc <- convey_prep(des_eusilc)
library(convey)
# linearize the indicator arpt: whole sample library vardpoor
dati <- data.frame(IDd = 1:nrow(eusilc), eusilc)
vardpoor_arptw <- linarpt(Y = "eqIncome", id = "IDd", weight = "rb050", Dom = NULL,
dataset = dati, percentage = 60, order_quant = 50)
# show results from vardpoor summary list
vardpoor_arptwl <- list(value = vardpoor_arptw$value, lin = vardpoor_arptw$lin$lin_arpt)
vardpoor_arptw$value
SE_lin(vardpoor_arptwl, des_eusilc)
fun_arptw <- svyarpt(~eqIncome, design = des_eusilc, 0.5, 0.6)
fun_arptw
vardpoor_arptd <- linarpt(Y = "eqIncome", id = "IDd", weight = "rb050", Dom = "db040",
dataset = dati, percentage = 60, order_quant = 50)
# summary list
vardpoor_arptdl <- list(domain = data.frame(vardpoor_arptd$value)[, "db040"], value = as.list(as.data.frame(vardpoor_arptd$value)[,
2]), statistic.lin = as.list(as.data.frame(vardpoor_arptd$lin)[, 2:10]))
# 1.1.2.1 point estimates
unlist(vardpoor_arptdl$value)
# 1.1.2.2 se estimates
unlist(SE_lin(vardpoor_arptdl, des_eusilc))
fun_arptd <- svyby(~eqIncome, by = ~db040, design = des_eusilc, FUN = svyarpt, order = 0.5, percent = 0.6, deff = FALSE, keep.var = FALSE, keep.names = TRUE)
fun_arptd
vardpoor_arprw <- linarpr(Y = "eqIncome", id = "IDd", weight = "rb050", Dom = NULL,
dataset = dati, percentage = 60, order_quant = 50)
# summary list
vardpoor_arprwl <- list(value = vardpoor_arprw$value, lin = vardpoor_arprw$lin$lin_arpr)
# 2.1.1.1 point estimate
vardpoor_arprw$value
# 2.1.1.2 se estimate
SE_lin(vardpoor_arprwl, des_eusilc)
fun_arprw <- svyarpr(~eqIncome, des_eusilc, 0.5, 0.6)
fun_arprw
fun_arprd <- svyby(~eqIncome, by = ~db040, design = des_eusilc, FUN = svyarpr, order = 0.5, percent = 0.6,deff = FALSE, keep.var = FALSE)
fun_arprd
unlist(vardpoor_arprdl$value)
vardpoor_arprd <- linarpr(Y = "eqIncome", id = "IDd", weight = "rb050", Dom = "db040",
dataset = dati, percentage = 60, order_quant = 50)
# summary list
vardpoor_arprdl <- list(domain = data.frame(vardpoor_arprd$value)[, "db040"], value = as.list(as.data.frame(vardpoor_arprd$value)[,
2]), statistic.lin = as.list(as.data.frame(vardpoor_arprd$lin)[, 2:10]))
# 2.1.2.1 point estimates
unlist(vardpoor_arprdl$value)
# 2.1.2.2 se estimates
unlist(SE_lin(vardpoor_arprdl, des_eusilc))
fun_arprd
fun_rmpgw <- svyrmpg(~eqIncome, design = des_eusilc, 0.5, 0.6)
dati <- data.frame(IDd = 1:nrow(eusilc), eusilc)
vardpoor_rmpgw <- linrmpg(Y = "eqIncome", id = "IDd", weight = "rb050", Dom = NULL,
dataset = dati, percentage = 60, order_quant = 50)
# show results from vardpoor summary list
vardpoor_rmpgwl <- list(value = vardpoor_rmpgw$value, lin = vardpoor_rmpgw$lin$lin_rmpg)
# 3.1.1.1 point estimate
vardpoor_rmpgw$value
# linearized rmpg for whole sample 3.1.1.2 se estimate
SE_lin(vardpoor_rmpgwl, des_eusilc)
fun_rmpgw
vardpoor_rmpgd <- linrmpg(Y = "eqIncome", id = "IDd", weight = "rb050", Dom = "db040",
dataset = dati, percentage = 60, order_quant = 50)
# summary list
vardpoor_rmpgdl <- list(domain = data.frame(vardpoor_rmpgd$value)[, "db040"], value = as.list(as.data.frame(vardpoor_rmpgd$value)[,
2]), statistic.lin = as.list(as.data.frame(vardpoor_rmpgd$lin)[, 2:10]))
# 3.1.2.1 point estimates
unlist(vardpoor_rmpgdl$value)
# 3.1.2.2 se estimates
unlist(SE_lin(vardpoor_rmpgdl, des_eusilc))
fun_rmpgd <- svyby(~eqIncome, by = ~db040, design = des_eusilc, FUN = svyrmpg, order = 0.5, percent = 0.6, deff = FALSE, keep.var = FALSE, keep.names = TRUE)
fun_rmpgd
dati <- data.frame(IDd = 1:nrow(eusilc), eusilc)
vardpoor_qsrw <- linqsr(Y = "eqIncome", id = "IDd", weight = "rb050", Dom = NULL,
dataset = dati, alpha = 20)
# show results from vardpoor summary list
vardpoor_qsrwl <- list(value = vardpoor_qsrw$value, lin = vardpoor_qsrw$lin$lin_qsr)
# 4.1.1.1 point estimate
vardpoor_qsrw$value
# linearized qsr for whole sample 4.1.1.2 se estimate
SE_lin(vardpoor_qsrwl, des_eusilc)
fun_qsrw <- svyqsr(~eqIncome, des_eusilc, 0.2)
fun_qsrw
fun_qsrd <- svyby(~eqIncome, by = ~db040, design = des_eusilc, FUN = svyqsr,
alpha = 0.2, deff = FALSE,keep.var = FALSE)
vardpoor_qsrd <- linqsr(Y = "eqIncome", id = "IDd", weight = "rb050", Dom = "db040",
dataset = dati, alpha = 20)
# summary list
vardpoor_qsrdl <- list(domain = data.frame(vardpoor_qsrd$value)[, "db040"], value = as.list(as.data.frame(vardpoor_qsrd$value)[,
2]), statistic.lin = as.list(as.data.frame(vardpoor_qsrd$lin)[, 2:10]))
# 4.1.2.1 point estimates
unlist(vardpoor_qsrdl$value)
# 4.1.2.2 se estimates
unlist(SE_lin(vardpoor_qsrdl, des_eusilc))
fun_qsrd
library(convey)
convey:::svygini.survey.design
svygini1 <- function(formula, design, ncom, comp = TRUE, ...) {
if (is.null(attr(design, "full_design")))
stop("you must run the ?convey_prep function on your linearized survey design object immediately after creating it with the svydesign() function.")
# if the class of the full_design attribute is just a TRUE, then the design is
# already the full design.  otherwise, pull the full_design from that attribute.
if ("logical" %in% class(attr(design, "full_design")))
full_design <- design else full_design <- attr(design, "full_design")
ncom <- names(weights(full_design))
inc <- terms.formula(formula)[[2]]
w <- weights(design)
ind <- names(w)
df <- model.frame(design)
incvar <- df[[as.character(inc)]]
w <- w[order(incvar)]
incvar <- incvar[order(incvar)]
# population size
N <- sum(w)
# total income
Y <- sum(incvar * w)
# cumulative weight
r <- cumsum(w)
# partial weighted function
G <- cumsum(incvar * w)
T2<- list(value=sum(incvar*w), lin=incvar)
T3<- list(value= sum(w), lin=rep(1, length(incvar)))
# get T1
T1val<- sum(r*incvar*w)
T1lin<-  Y - G + incvar * w + r* incvar
T1<- list(value=T1val, lin=T1lin)
list_all<- list(T1 = T1, T2 = T2, T3 = T3)
list_allc<-lapply(list_all, function(t){
names(t$lin)<-ind
list(value=t$value,lin=complete(t$lin,ncom))
})
GINI<- contrastinf(quote((2*T1-T2)/(T2*T3)-1), list_all)
lin_gini <- GINI$lin
# complete with 0
#   names(lin_gini) <- names(w)
#   lin_gini_comp <- complete(lin_gini, ncom)
#   if (comp)
#     res <- lin_gini_comp else res <- lin_gini
rval <- GINI$value
lin<- as.vector(GINI$lin)
variance <- (SE_lin2(lin, full_design))^2
class(rval) <- "cvystat"
attr(rval, "var") <- variance
attr(rval, "statistic") <- "gini"
attr(rval,"lin")<- lin
rval
}
library(vardpoor)
data(eusilc)
dati = data.frame(1:nrow(eusilc), eusilc)
colnames(dati)[1] <- "IDd"
library(survey)
# create a design object
des_eusilc <- svydesign(ids = ~db040, weights = ~rb050, data = eusilc)
library(convey)
des_eusilc <- convey_prep(des_eusilc)
fun_giniw <-  svygini1(~eqIncome, des_eusilc, comp=TRUE)
fun_giniw
fun_ginid<- svyby(~eqIncome,by=~db040, design=des_eusilc, FUN=svygini1,
deff=FALSE, keep.var=FALSE)
svygini1 <- function(formula, design, ncom, comp = TRUE, ...) {
if (is.null(attr(design, "full_design")))
stop("you must run the ?convey_prep function on your linearized survey design object immediately after creating it with the svydesign() function.")
# if the class of the full_design attribute is just a TRUE, then the design is
# already the full design.  otherwise, pull the full_design from that attribute.
if ("logical" %in% class(attr(design, "full_design")))
full_design <- design else full_design <- attr(design, "full_design")
ncom <- names(weights(full_design))
inc <- terms.formula(formula)[[2]]
w <- weights(design)
ind <- names(w)
df <- model.frame(design)
incvar <- df[[as.character(inc)]]
w <- w[order(incvar)]
incvar <- incvar[order(incvar)]
# population size
N <- sum(w)
# total income
Y <- sum(incvar * w)
# cumulative weight
r <- cumsum(w)
# partial weighted function
G <- cumsum(incvar * w)
T2<- list(value=sum(incvar*w), lin=incvar)
T3<- list(value= sum(w), lin=rep(1, length(incvar)))
# get T1
T1val<- sum(r*incvar*w)
T1lin<-  Y - G + incvar * w + r* incvar
T1<- list(value=T1val, lin=T1lin)
list_all<- list(T1 = T1, T2 = T2, T3 = T3)
list_allc<-lapply(list_all, function(t){
names(t$lin)<-ind
list(value=t$value,lin=complete(t$lin,ncom))
})
GINI<- contrastinf(quote((2*T1-T2)/(T2*T3)-1), list_allc)
lin_gini <- GINI$lin
# complete with 0
#   names(lin_gini) <- names(w)
#   lin_gini_comp <- complete(lin_gini, ncom)
#   if (comp)
#     res <- lin_gini_comp else res <- lin_gini
rval <- GINI$value
lin<- as.vector(GINI$lin)
variance <- (SE_lin2(lin, full_design))^2
class(rval) <- "cvystat"
attr(rval, "var") <- variance
attr(rval, "statistic") <- "gini"
attr(rval,"lin")<- lin
rval
}
###################################################################33
fun_ginid<- svyby(~eqIncome,by=~db040, design=des_eusilc, FUN=svygini1,
deff=FALSE, keep.var=FALSE)
fun_ginid
dati <- data.frame(IDd = 1:nrow(eusilc), eusilc)
vardpoor_giniw <- lingini(Y = "eqIncome", id = "IDd", weight = "rb050", dataset = dati)
# show results from vardpoor summary list
vardpoor_giniwl <- list(value = vardpoor_giniw$value, lin = vardpoor_giniw$lin$lin_gini)
# 1.1.1.1 point estimate
vardpoor_giniw$value
# linearized gini for whole sample 1.1.1.2 se estimate
SE_lin(vardpoor_giniwl, des_eusilc)
fun_giniw <- svygini1(~eqIncome, des_eusilc)
fun_giniw
vardpoor_ginid <- lingini(Y = "eqIncome", id = "IDd", weight = "rb050", Dom = c("db040"),
dataset = dati)
# summary list
vardpoor_ginidl <- list(domain = data.frame(vardpoor_ginid$value)[, "db040"], value = as.list(as.data.frame(vardpoor_ginid$value)[,
2]), statistic.lin = as.list(as.data.frame(vardpoor_ginid$lin)[, 2:10]))
# 1.1.2.1 point estimates
unlist(vardpoor_ginidl$value)
# 1.1.2.2 se estimates
unlist(SE_lin(vardpoor_ginidl, des_eusilc))
fun_ginid <- svyby(~eqIncome, by = ~db040, design = des_eusilc, FUN = svygini1, deff = FALSE, keep.var = FALSE)
fun_ginid
svygini1 <- function(formula, design, ncom, comp = TRUE, ...) {
if (is.null(attr(design, "full_design")))
stop("you must run the ?convey_prep function on your linearized survey design object immediately after creating it with the svydesign() function.")
# if the class of the full_design attribute is just a TRUE, then the design is
# already the full design.  otherwise, pull the full_design from that attribute.
if ("logical" %in% class(attr(design, "full_design")))
full_design <- design else full_design <- attr(design, "full_design")
ncom <- names(weights(full_design))
inc <- terms.formula(formula)[[2]]
w <- weights(design)
ind <- names(w)
df <- model.frame(design)
incvar <- df[[as.character(inc)]]
w <- w[order(incvar)]
incvar <- incvar[order(incvar)]
# population size
N <- sum(w)
# total income
Y <- sum(incvar * w)
# cumulative weight
r <- cumsum(w)
# partial weighted function
G <- cumsum(incvar * w)
T2<- list(value=sum(incvar*w), lin=incvar)
T3<- list(value= sum(w), lin=rep(1, length(incvar)))
# get T1
T1val<- sum(r*incvar*w)
T1lin<-  Y - G + incvar * w + r* incvar
T1<- list(value=T1val, lin=T1lin)
list_all<- list(T1 = T1, T2 = T2, T3 = T3)
#   list_allc<-lapply(list_all, function(t){
#     names(t$lin)<-ind
#     list(value=t$value,lin=complete(t$lin,ncom))
#   })
GINI<- contrastinf(quote((2*T1-T2)/(T2*T3)-1), list_allc)
lingini <- as.vector(GINI$lin)
# complete with 0
names(lingini) <- names(w)
if (comp) lingini<-complete(lingini, ncom)
rval <- GINI$value
variance <- (SE_lin2(lingini, full_design))^2
class(rval) <- "cvystat"
attr(rval, "var") <- variance
attr(rval, "statistic") <- "gini"
attr(rval,"lin")<- lin
rval
}
dati <- data.frame(IDd = 1:nrow(eusilc), eusilc)
vardpoor_giniw <- lingini(Y = "eqIncome", id = "IDd", weight = "rb050", dataset = dati)
# show results from vardpoor summary list
vardpoor_giniwl <- list(value = vardpoor_giniw$value, lin = vardpoor_giniw$lin$lin_gini)
# 1.1.1.1 point estimate
vardpoor_giniw$value
# linearized gini for whole sample 1.1.1.2 se estimate
SE_lin(vardpoor_giniwl, des_eusilc)
fun_giniw <- svygini1(~eqIncome, des_eusilc)
svygini1 <- function(formula, design, ncom, comp = TRUE, ...) {
if (is.null(attr(design, "full_design")))
stop("you must run the ?convey_prep function on your linearized survey design object immediately after creating it with the svydesign() function.")
# if the class of the full_design attribute is just a TRUE, then the design is
# already the full design.  otherwise, pull the full_design from that attribute.
if ("logical" %in% class(attr(design, "full_design")))
full_design <- design else full_design <- attr(design, "full_design")
ncom <- names(weights(full_design))
inc <- terms.formula(formula)[[2]]
w <- weights(design)
ind <- names(w)
df <- model.frame(design)
incvar <- df[[as.character(inc)]]
w <- w[order(incvar)]
incvar <- incvar[order(incvar)]
# population size
N <- sum(w)
# total income
Y <- sum(incvar * w)
# cumulative weight
r <- cumsum(w)
# partial weighted function
G <- cumsum(incvar * w)
T2<- list(value=sum(incvar*w), lin=incvar)
T3<- list(value= sum(w), lin=rep(1, length(incvar)))
# get T1
T1val<- sum(r*incvar*w)
T1lin<-  Y - G + incvar * w + r* incvar
T1<- list(value=T1val, lin=T1lin)
list_all<- list(T1 = T1, T2 = T2, T3 = T3)
#   list_allc<-lapply(list_all, function(t){
#     names(t$lin)<-ind
#     list(value=t$value,lin=complete(t$lin,ncom))
#   })
GINI<- contrastinf(quote((2*T1-T2)/(T2*T3)-1), list_all)
lingini <- as.vector(GINI$lin)
# complete with 0
names(lingini) <- names(w)
if (comp) lingini<-complete(lingini, ncom)
rval <- GINI$value
variance <- (SE_lin2(lingini, full_design))^2
class(rval) <- "cvystat"
attr(rval, "var") <- variance
attr(rval, "statistic") <- "gini"
attr(rval,"lin")<- lin
rval
}
###################################################################33
fun_giniw <- svygini1(~eqIncome, des_eusilc)
svygini1 <- function(formula, design, ncom, comp = TRUE, ...) {
if (is.null(attr(design, "full_design")))
stop("you must run the ?convey_prep function on your linearized survey design object immediately after creating it with the svydesign() function.")
# if the class of the full_design attribute is just a TRUE, then the design is
# already the full design.  otherwise, pull the full_design from that attribute.
if ("logical" %in% class(attr(design, "full_design")))
full_design <- design else full_design <- attr(design, "full_design")
ncom <- names(weights(full_design))
inc <- terms.formula(formula)[[2]]
w <- weights(design)
ind <- names(w)
df <- model.frame(design)
incvar <- df[[as.character(inc)]]
w <- w[order(incvar)]
incvar <- incvar[order(incvar)]
# population size
N <- sum(w)
# total income
Y <- sum(incvar * w)
# cumulative weight
r <- cumsum(w)
# partial weighted function
G <- cumsum(incvar * w)
T2<- list(value=sum(incvar*w), lin=incvar)
T3<- list(value= sum(w), lin=rep(1, length(incvar)))
# get T1
T1val<- sum(r*incvar*w)
T1lin<-  Y - G + incvar * w + r* incvar
T1<- list(value=T1val, lin=T1lin)
list_all<- list(T1 = T1, T2 = T2, T3 = T3)
#   list_allc<-lapply(list_all, function(t){
#     names(t$lin)<-ind
#     list(value=t$value,lin=complete(t$lin,ncom))
#   })
GINI<- contrastinf(quote((2*T1-T2)/(T2*T3)-1), list_all)
lingini <- as.vector(GINI$lin)
# complete with 0
names(lingini) <- names(w)
if (comp) lingini<-complete(lingini, ncom)
rval <- GINI$value
variance <- (SE_lin2(lingini, full_design))^2
class(rval) <- "cvystat"
attr(rval, "var") <- variance
attr(rval, "statistic") <- "gini"
attr(rval,"lin")<- lingini
rval
}
library(vardpoor)
data(eusilc)
dati = data.frame(1:nrow(eusilc), eusilc)
colnames(dati)[1] <- "IDd"
library(survey)
# create a design object
des_eusilc <- svydesign(ids = ~db040, weights = ~rb050, data = eusilc)
library(convey)
des_eusilc <- convey_prep(des_eusilc)
dati <- data.frame(IDd = 1:nrow(eusilc), eusilc)
vardpoor_giniw <- lingini(Y = "eqIncome", id = "IDd", weight = "rb050", dataset = dati)
# show results from vardpoor summary list
vardpoor_giniwl <- list(value = vardpoor_giniw$value, lin = vardpoor_giniw$lin$lin_gini)
# 1.1.1.1 point estimate
vardpoor_giniw$value
# linearized gini for whole sample 1.1.1.2 se estimate
SE_lin(vardpoor_giniwl, des_eusilc)
fun_giniw <- svygini1(~eqIncome, des_eusilc)
fun_giniw
# domains library vardpoor
vardpoor_ginid <- lingini(Y = "eqIncome", id = "IDd", weight = "rb050", Dom = c("db040"),
dataset = dati)
# summary list
vardpoor_ginidl <- list(domain = data.frame(vardpoor_ginid$value)[, "db040"], value = as.list(as.data.frame(vardpoor_ginid$value)[,
2]), statistic.lin = as.list(as.data.frame(vardpoor_ginid$lin)[, 2:10]))
# 1.1.2.1 point estimates
unlist(vardpoor_ginidl$value)
# 1.1.2.2 se estimates
unlist(SE_lin(vardpoor_ginidl, des_eusilc))
fun_ginid <- svyby(~eqIncome, by = ~db040, design = des_eusilc, FUN = svygini1, deff = FALSE, keep.var = FALSE)
fun_ginid
devtools::document()
library("convey", lib.loc="~/R/win-library/3.2")
library(convey)
library(vardpoor)
data(eusilc)
library(survey)
des_eusilc <- svydesign(ids=~db040, weights=~rb050, data=eusilc)
des_eusilc <- convey_prep( des_eusilc )
gini_eqIncome <- svygini(~eqIncome, design=des_eusilc)
gini_eqIncome
devtools::document()
library(convey)
library(vardpoor)
data(eusilc)
library(survey)
des_eusilc <- svydesign(ids=~db040, weights=~rb050, data=eusilc)
des_eusilc <- convey_prep( des_eusilc )
gini_eqIncome <- svygini(~eqIncome, design=des_eusilc)
dati <- data.frame(IDd = 1:nrow(eusilc), eusilc)
vardpoor_giniw <- lingini(Y = "eqIncome", id = "IDd", weight = "rb050", dataset = dati)
# show results from vardpoor summary list
vardpoor_giniwl <- list(value = vardpoor_giniw$value, lin = vardpoor_giniw$lin$lin_gini)
# 1.1.1.1 point estimate
vardpoor_giniw$value
# linearized gini for whole sample 1.1.1.2 se estimate
SE_lin(vardpoor_giniwl, des_eusilc)
fun_giniw <- svygini1(~eqIncome, des_eusilc)
# show results from convey 1.2.1.1 point estimate
fun_giniw
fun_giniw <- svygini(~eqIncome, des_eusilc)
# show results from convey 1.2.1.1 point estimate
fun_giniw
# summary list
vardpoor_ginidl <- list(domain = data.frame(vardpoor_ginid$value)[, "db040"], value = as.list(as.data.frame(vardpoor_ginid$value)[,
2]), statistic.lin = as.list(as.data.frame(vardpoor_ginid$lin)[, 2:10]))
# 1.1.2.1 point estimates
unlist(vardpoor_ginidl$value)
# 1.1.2.2 se estimates
unlist(SE_lin(vardpoor_ginidl, des_eusilc))
vardpoor_ginid <- lingini(Y = "eqIncome", id = "IDd", weight = "rb050", Dom = c("db040"),
dataset = dati)
vardpoor_ginidl <- list(domain = data.frame(vardpoor_ginid$value)[, "db040"], value = as.list(as.data.frame(vardpoor_ginid$value)[,
2]), statistic.lin = as.list(as.data.frame(vardpoor_ginid$lin)[, 2:10]))
# 1.1.2.1 point estimates
unlist(vardpoor_ginidl$value)
# 1.1.2.2 se estimates
unlist(SE_lin(vardpoor_ginidl, des_eusilc))
fun_ginid <- svyby(~eqIncome, by = ~db040, design = des_eusilc, FUN = svygini, deff = FALSE, keep.var = FALSE)
fun_ginid
library(convey)
library(vardpoor)
data(eusilc)
dati = data.frame(1:nrow(eusilc), eusilc)
colnames(dati)[1] <- "IDd"
library(survey)
# create a design object
des_eusilc <- svydesign(ids = ~db040, weights = ~rb050, data = eusilc)
library(convey)
des_eusilc <- convey_prep(des_eusilc)
fun_arptd <- svyby(~eqIncome, by = ~db040, design = des_eusilc, FUN = svyarpt, order = 0.5, percent = 0.6, deff = FALSE, keep.var = FALSE, keep.names = TRUE)
fun_arptd
fun_ginid <- svyby(~eqIncome, by = ~db040, design = des_eusilc, FUN = svygini, deff = FALSE, keep.var = FALSE)
fun_ginid
fun_ginid <- svyby(~eqIncome, by = ~db040, design = des_eusilc, FUN = svygini, deff = FALSE)
fun_ginid
