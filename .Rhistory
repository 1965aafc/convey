wage<-df[[as.character(wage)]]
design<- update(design, one =length(wage))
# sex factor
mf<-model.frame(sex,design$variables,na.action=na.pass)
xx<-lapply(attr(terms(sex),"variables")[-1],
function(tt) model.matrix(eval(bquote(~0+.(tt))),mf))
cols<-sapply(xx,NCOL)
sex<-matrix(nrow=NROW(xx[[1]]),ncol=sum(cols))
scols<-c(0,cumsum(cols))
for(i in 1:length(xx)){
sex[,scols[i]+1:cols[i]]<-xx[[i]]
}
colnames(sex)<-do.call("c",lapply(xx,colnames))
sex<-as.matrix(sex)
wage1<- wage*sex[,1]
wage2<- wage*sex[,2]
one1<- 1*sex[,1]
one2<- 1*sex[,2]
design<- update(design, wage1=wage1, wage2=wage2, one1=one1,one2=one2)
imean1<- ratio_inf(itot(~wage1,design),itot(~one1,design))
imean2<- ratio_inf(itot(~wage2,design),itot(~one2,design))
NUM<- cl_inf(1,-1, imean2,imean1)
DEN<- imean2
igpg<- ratio_inf(NUM,DEN)
list(value=igpg$value,lin=igpg$lin )
}
inf_gpg<-svygpg(~y,des,~sex  )
ses_gpg<- svygpg(~earningsHour,des_ses, ~sex)
str(ses_gpg)
gpgs1$value
summary(gpgs1$lin)
str(ses_gpg$lin)
summary(100*ses_gpg$lin)
library(convey)
svygpg.svyrep.design<- function(x, design, sex){
ws <- weights(design, "sampling")
wage <- terms.formula(x)[[2]]
df <- model.frame(design)
wage<-df[[as.character(wage)]]
design<- update(design, one =rep(1,length(wage)))
# sex factor
mf<-model.frame(sex,design$variables,na.action=na.pass)
xx<-lapply(attr(terms(sex),"variables")[-1],
function(tt) model.matrix(eval(bquote(~0+.(tt))),mf))
cols<-sapply(xx,NCOL)
sex<-matrix(nrow=NROW(xx[[1]]),ncol=sum(cols))
scols<-c(0,cumsum(cols))
for(i in 1:length(xx)){
sex[,scols[i]+1:cols[i]]<-xx[[i]]
}
colnames(sex)<-do.call("c",lapply(xx,colnames))
sex<-as.matrix(sex)
ComputeGpg<- function(earn_hour,w, sex){
col_female<- grep("female", colnames(sex))
col_male<-setdiff(1:2,col_female)
ind_men<- sex[,col_male]
ind_fem<- sex[,col_female]
med_men<-sum(ind_men*earn_hour*w)/sum(ind_men*w)
med_fem<-sum(ind_fem*earn_hour*w)/sum(ind_fem*w)
gpg<- 100*(med_men-med_fem)/med_men
gpg
}
rval<- ComputeGpg(earn_hour=wage, w=ws, sex=sex)
ww <- weights(design, "analysis")
qq <- apply(ww, 2, function(wi) ComputeGpg(wage, wi, sex=sex))
variance <- svrVar(qq,design$scale,design$rscales, mse = design$mse, coef = rval)
list(value = rval, se = sqrt(variance))
}
set.seed(1)
y<- c(rchisq(10,10),rchisq(10,20))
H<- rep(c("str1","str2"),c(10,10))
PSU<- rep(rep(c(1,2),c(5,5)),2)
weights <- rep(2,20)
# create data frame
test<- data.frame(y=y,H=H,psu=PSU, w=weights)
test$sex<- rep(c(1,2),c(10,10))
des<- svydesign(id=~psu, strata =~H, weights =~w, data=test, nest = TRUE )
# using svycontrast
test$one<-rep(1, nrow(test))
test$one1<- test$one*(test$sex==1)
test$one2<- test$one*(test$sex==2)
test$y1<- test$y*(test$sex==1)
test$y2<- test$y*(test$sex==2)
des<- svydesign(id=~psu, strata =~H, weights =~w, data=test, nest = TRUE )
a <-svytotal(~y1+y2+one1+one2, des)
svycontrast(a, quote((y1/one1-y2/one2)/(y1/one1)))
set.seed(1)
y<- c(rchisq(10,10),rchisq(10,20))
H<- rep(c("str1","str2"),c(10,10))
PSU<- rep(rep(c(1,2),c(5,5)),2)
weights <- rep(2,20)
# create data frame
test<- data.frame(y=y,H=H,psu=PSU, w=weights)
test$sex<- rep(c(1,2),c(10,10))
library(survey)
des<- svydesign(id=~psu, strata =~H, weights =~w, data=test, nest = TRUE )
# using svycontrast
test$one<-rep(1, nrow(test))
test$one1<- test$one*(test$sex==1)
test$one2<- test$one*(test$sex==2)
test$y1<- test$y*(test$sex==1)
test$y2<- test$y*(test$sex==2)
des<- svydesign(id=~psu, strata =~H, weights =~w, data=test, nest = TRUE )
a <-svytotal(~y1+y2+one1+one2, des)
svycontrast(a, quote((y1/one1-y2/one2)/(y1/one1)))
test$sex<- as.factor(sex)
test$sex<- as.factor(test$sex)
des<- svydesign(id=~psu, strata =~H, weights =~w, data=test, nest = TRUE )
svygpg.survey.design(~y, des, ~sex)
# influence function of a constant
iconst<-function(formula, design){
inc <- terms.formula(formula)[[2]]
df <- model.frame(design)
incvar<-df[[as.character(inc)]]
list(value=0, lin=rep(0,length(incvar)))
}
# infuence function of a total
itot<- function(formula, design){
inc <- terms.formula(formula)[[2]]
df <- model.frame(design)
incvar<-df[[as.character(inc)]]
value<-coef(svytotal(x=formula,design=design))
lin<- incvar
list(value=value, lin=lin)
}
## derivation rules for influence functions of functionals
## linear combination of functionals
##  a, b - scalars
#  T, S - lists with two components: value and lin
# IF  - list with with two components
# Fprime - real function
cl_inf<-function(a, b, T, S){
lin<-a*T$lin+b*S$lin
value<- a*T$value+b*S$value
list(value=value, lin=lin)
}
# product of o two functionals
prod_inf<-function(T, S){
value <- T$value*S$value
lin <-T$value*S$lin+S$value*T$lin
list(value=value, lin=lin)
}
# ratio of functionals
ratio_inf<-function(T, S){
value <- T$value/S$value
lin <- (S$value*T$lin-T$value*S$lin)/((S$value)^2)
list(value=value, lin=lin)
}
# composition of two functionals ????
comp_inf <- function(T,S){
itsm<-rep(S$value,length(T$lin))
itsm*S$lin
}
# function of a functional
fun_par_inf<- function(S, IF, Fprime){
value<- IF
n<-length(S$lin)
if(is.null(S$lin))lin<-solve(diag(Fprime(S$value),n,n),-IF(S$value))
else lin<-IF(S$value)+ Fprime(S$value)*S$lin
list(value= value, lin=lin)
}
svygpg.survey.design<- function(x, design, sex){
wage <- terms.formula(x)[[2]]
df <- model.frame(design)
wage<-df[[as.character(wage)]]
design<- update(design, one =rep(1,length(wage)))
# sex factor
mf<-model.frame(sex,design$variables,na.action=na.pass)
xx<-lapply(attr(terms(sex),"variables")[-1],
function(tt) model.matrix(eval(bquote(~0+.(tt))),mf))
cols<-sapply(xx,NCOL)
sex<-matrix(nrow=NROW(xx[[1]]),ncol=sum(cols))
scols<-c(0,cumsum(cols))
for(i in 1:length(xx)){
sex[,scols[i]+1:cols[i]]<-xx[[i]]
}
colnames(sex)<-do.call("c",lapply(xx,colnames))
sex<-as.matrix(sex)
wage1<- wage*sex[,1]
wage2<- wage*sex[,2]
one1<- 1*sex[,1]
one2<- 1*sex[,2]
design<- update(design, wage1=wage1, wage2=wage2, one1=one1,one2=one2)
imean1<- ratio_inf(itot(~wage1,design=design),itot(~one1,design=design))
imean2<- ratio_inf(itot(~wage2,design=design),itot(~one2,design=design))
NUM<- cl_inf(1,-1, imean2,imean1)
DEN<- imean2
igpg<- ratio_inf(NUM,DEN)
list(value=igpg$value,lin=igpg$lin )
}
lixo<- svygpg.survey.design(~y, des, ~sex)
str(lixo)
svycontrast(a, quote((y1/one1-y2/one2)/(y1/one1)))
svycontrast(a, quote((y2/one2-y1/one1)/(y2/one2)))
lin_test_gpg<- svygpg.survey.design(~y, des, ~sex)
test$lingpg<-lin_test_gpg$lin
des<- svydesign(id=~psu, strata =~H, weights =~w, data=test, nest = TRUE )
SE(svytotal(~lingpg, des))
test<- transform(test, sex= factor(sex,labels=c("female","male")))
test
des<- svydesign(id=~psu, strata =~H, weights =~w, data=test, nest = TRUE )
svygpg.survey.design<- function(x, design, sex){
wage <- terms.formula(x)[[2]]
df <- model.frame(design)
wage<-df[[as.character(wage)]]
design<- update(design, one =rep(1,length(wage)))
# sex factor
mf<-model.frame(sex,design$variables,na.action=na.pass)
xx<-lapply(attr(terms(sex),"variables")[-1],
function(tt) model.matrix(eval(bquote(~0+.(tt))),mf))
cols<-sapply(xx,NCOL)
sex<-matrix(nrow=NROW(xx[[1]]),ncol=sum(cols))
scols<-c(0,cumsum(cols))
for(i in 1:length(xx)){
sex[,scols[i]+1:cols[i]]<-xx[[i]]
}
colnames(sex)<-do.call("c",lapply(xx,colnames))
sex<-as.matrix(sex)
col_female<- grep("female", colnames(sex))
col_male<-setdiff(1:2,col_female)
earnhem<- wage*sex[,col_male]
earnhf<- wage*sex[,col_female]
indm<- sex[,col_male]
indf<- 1*sex[,col_female]
design<- update(design, earnhem=earnhem, earnhf=earnhf, indm=indm,indf=indf)
imean1<- ratio_inf(itot(~earnhem,design=design),itot(~indm,design=design))
imean2<- ratio_inf(itot(~earnhf,design=design),itot(~indf,design=design))
NUM<- cl_inf(1,-1, imean1,imean2)
DEN<- imean1
igpg<- ratio_inf(NUM,DEN)
list(value=igpg$value,lin=igpg$lin )
}
lin_test_gpg<- svygpg.survey.design(~y, des, ~sex)
lin_test_gpg$value
svycontrast(a, quote((y2/one2-y1/one1)/(y2/one2)))
test$lingpg<-lin_test_gpg$lin
des<- svydesign(id=~psu, strata =~H, weights =~w, data=test, nest = TRUE )
SE(svytotal(~lingpg, des))
des_rep<- as.svrepdesign(des, type="bootstrap")
svygpg.svyrep.design(~y, des_rep, ~sex)
?as.svrepdesign
des_rep<- as.svrepdesign(des, type="bootstrap", replicates=500)
svygpg.svyrep.design(~y, des_rep, ~sex)
svygpg <-function( formula , design , ... ){
UseMethod( "svygpg" , design )
}
des_ses<- svydesign(id=~1, weights=~weights, data=ses,variables=~weights+sex+earningsHour)
data(ses)
str(ses)
dati <- data.table(ID = 1:nrow(ses), ses)
setnames(dati, "sex", "sexf")
dati[sexf=="male", sex:=1]
dati[sexf=="female", sex:=2]
gpgs1 <- lingpg(Y="earningsHour", gender="sex",
id="ID", weight="weights", dataset=dati)
gpgs1$value
summary(gpgs1$lin$lin_gpg)
str(gpgs1$lin$lin_gpg)
data(ses)
str(ses)
library(vardpoor)
data(ses)
str(ses)
dati <- data.table(ID = 1:nrow(ses), ses)
setnames(dati, "sex", "sexf")
dati[sexf=="male", sex:=1]
dati[sexf=="female", sex:=2]
gpgs1 <- lingpg(Y="earningsHour", gender="sex",
id="ID", weight="weights", dataset=dati)
gpgs1$value
summary(gpgs1$lin$lin_gpg)
library(survey)
des_ses<- svydesign(id=~1, weights=~weights, data=ses,variables=~weights+sex+earningsHour)
names(des_ses$variable)
ses_gpg<- svygpg(~earningsHour,des_ses, ~sex)
ses_gpg$value
summary(100*ses_gpg$lin)
ses$one<-rep(1, nrow(ses))
ses$one1<- ses$one*(ses$sex=="male")
ses$one2<- ses$one*(ses$sex=="female")
ses$earningsHour1<- ses$earningsHour*(ses$sex=="male")
ses$earningsHour2<- ses$earningsHour*(ses$sex=="female")
des_ses<- svydesign(id=~1, weights=~weights, data=ses)
a<-svytotal(~earningsHour1+earningsHour2+one1+one2, des_ses )
svycontrast(a, quote((earningsHour1/one1-earningsHour2/one2)/(earningsHour1/one1)))
des_ses<- update(des_ses, lingpgc=ses_gpg$lin)
svytotal(~lingpgc,des_ses)
gpg_rep<- svygpg(~earningsHour,syrepdes_ses, ~sex)
des_ses<- svydesign(id=~1, weights=~weights, data=ses,variables=~weights+sex+earningsHour)
syrepdes_ses<- as.svrepdesign(des_ses, type = "bootstrap", replicates=500)
gpg_rep<- svygpg(~earningsHour,syrepdes_ses, ~sex)
gpg_rep
gpg_rep
des_ses<- update(des_ses, lingpgv=gpgs1$lin$lin_gpg)
svytotal(~lingpgv, des_ses)
library(vardpoor)
data(ses)
# lin vardpoor
Im<- 1*(ses$sex=="male")
Xm<- sum(ses$earningsHour*Im*ses$weights)
Nm<- sum(Im*ses$weights)
If<- 1*(ses$sex=="female")
Xf<- sum(ses$earningsHour*If*ses$weights)
Nf<- sum(If*ses$weights)
gpg<- 1-(Xm/Nm)/(Xf/Nf)
gpg
Im<- 1*(ses$sex=="male")
Xm<- sum(ses$earningsHour*Im*ses$weights)
Nm<- sum(Im*ses$weights)
If<- 1*(ses$sex=="female")
Xf<- sum(ses$earningsHour*If*ses$weights)
Nf<- sum(If*ses$weights)
Xbarm<-Xm/Nm
Xbarf<- Xf/Nf
gpg<- 1-Xbarf/Xbarm
gpg
x<- ses$earningsHour
lingpg<- (1-gpg)* (Im/Nf-Im/Nm+x*Im/Xm -x*If/Xf )
summary(lingpg)
summary(gpgs1$lin$lin_gpg)
lingpg1<- (1-gpg)* (If/Nf-Im/Nm+x*Im/Xm-x*If/Xf)
summary(lingpg1)
summary(100*ses_gpg$lin)
fun_par_inf<- function(S,F,Fprime,...){
value<- F(S$value)$value
lin<- F(S$value)$lin+Fprime(S$value)*S$lin
list(value= value, lin=lin)
}
View(fun_par_inf)
library(vardpoor)
data(eusilc)
dati=data.frame(1:nrow(eusilc),eusilc)
colnames(dati)[1] <- "IDd"
library(survey)
# create a design object
des_eusilc <- svydesign(ids=~db040, weights=~rb050, data=eusilc)
fun_par_inf<- function(S,F,Fprime,...){
value<- F(S$value)$value
lin<- F(S$value)$lin+Fprime(S$value)*S$lin
list(value= value, lin=lin)
}
# example: arpr
icfdx<-function(x,...){
icdf(formula, design, x=x, ncom, comp)
}
fprimex<- function(x,...){
densfun(formula, design, x=x, htot=NULL, fun=c("F","S"))
}
library(vardpoor)
data(eusilc)
dati=data.frame(1:nrow(eusilc),eusilc)
colnames(dati)[1] <- "IDd"
library(survey)
# create a design object
des_eusilc <- svydesign(ids=~db040, weights=~rb050, data=eusilc)
lixo<- fun_par_inf(ARPT,icdfx,densfunx, formula=~eqIncome , design= des_eusilc, ncom=nrow(eusilc) ,
comp= TRUE, htot=NULL, fun="S" )
icfdx<-function(x,...){
icdf(formula, design, x=x, ncom, comp)
}
fprimex<- function(x,...){
densfun(formula, design, x=x, htot=NULL, fun=c("F","S"))
}
lixo<- fun_par_inf(ARPT,icdfx,fprimex, formula=~eqIncome , design= des_eusilc, ncom=nrow(eusilc) ,
comp= TRUE, htot=NULL, fun="S" )
icdfx<-function(x,...){
icdf(formula, design, x=x, ncom, comp)
}
lixo<- fun_par_inf(ARPT,icdfx,fprimex, formula=~eqIncome , design= des_eusilc, ncom=nrow(eusilc) ,
comp= TRUE, htot=NULL, fun="S" )
library(convey)
lixo<- fun_par_inf(ARPT,icdfx,fprimex, formula=~eqIncome , design= des_eusilc, ncom=nrow(eusilc) ,
comp= TRUE, htot=NULL, fun="S" )
library(vardpoor)
data(eusilc)
library(survey)
htot <- h_fun(eusilc$eqIncome, eusilc$rb050)
des_eusilc <- svydesign(ids=~db040, weights=~rb050, data=eusilc)
icdf_eqIncome <-icdf(~eqIncome, design=des_eusilc, 20000, ncom=nrow(eusilc), comp=TRUE)
arpt_eqIncome <-svyarpt(~eqIncome, design=des_eusilc, .5, .6, h = htot,
ncom=nrow(eusilc), comp=TRUE)
lixo<- fun_par_inf(arpt_eqIncome, icdfx, fprimex, formula=~eqIncome , design= des_eusilc,
ncom=nrow(eusilc) ,  comp= TRUE, htot=NULL, fun="S" )
lixo<-icdfx(2000,formula=~eqIncome , design= des_eusilc,ncom=nrow(eusilc) ,  comp= TRUE )
library(convey)
library(vardpoor)
data(eusilc)
dati=data.frame(1:nrow(eusilc),eusilc)
colnames(dati)[1] <- "IDd"
library(survey)
# create a design object
des_eusilc <- svydesign(ids=~db040, weights=~rb050, data=eusilc)
#
arpt_eqIncome <-svyarpt(~eqIncome, design=des_eusilc, .5, .6, h = htot,
ncom=nrow(eusilc), comp=TRUE)
htot<-h_fun(eusilc$eqIncome, eusilc$rb050)
arpt_eqIncome <-svyarpt(~eqIncome, design=des_eusilc, .5, .6, h = htot,
ncom=nrow(eusilc), comp=TRUE)
fun_par_inf<- function(S,F,Fprime,...){
value<- F(S$value)$value
lin<- F(S$value)$lin+Fprime(S$value)*S$lin
list(value= value, lin=lin)
}
# example: arpr
icdfx<-function(x,...){
icdf(formula, design, x=x, ncom, comp)
}
fprimex<- function(x,...){
densfun(formula, design, x=x, htot=NULL, fun=c("F","S"))
}
lixo<-icdfx(20000, formula=~eqIncome, design=des_eusilc,ncom=nrow(eusilc), comp= TRUE )
x
formula
arg.list
fun_par_inf<- function(S,F,Fprime,...){
dots<-substitute(list(...))[-1]
value<- F(S$value)$value
lin<- F(S$value)$lin+Fprime(S$value)*S$lin
list(value= value, lin=lin)
}
library(debug)
mtrace(fun_par_inf)
lixo<-icdfx(20000, formula=~eqIncome, design=des_eusilc,ncom=nrow(eusilc), comp= TRUE )
lixo<- fun_par_inf(arpt_eqIncome, icdfx, fprimex, formula=~eqIncome , design= des_eusilc,
ncom=nrow(eusilc) ,  comp= TRUE, htot=NULL, fun="S" )
lixo<- fun_par_inf(arpt_eqIncome, icdfx, fprimex, formula=~eqIncome , design= des_eusilc,
ncom=nrow(eusilc) ,  comp= TRUE, htot=NULL, fun="F" )
args(icdf)
icdfx<-function(x,...){
dots<-list(...)
icdf(formula=dots$formula, design=dots$design, x=x, ncom=dots$ncom, comp=dots$comp)
}
lixo<-icdfx(20000, formula=~eqIncome, design=des_eusilc,ncom=nrow(eusilc), comp= TRUE )
str(lixo)
icdfx<-function(x,...){
dots<-list(...)
icdf(formula=dots$formula, design=dots$design, x=x, ncom=dots$ncom, comp=dots$comp)
}
fprimex<- function(x,...){
dots<-list(...)
densfun(formula=dots$formula, design=dots$design, x=x, htot=dots$htot, fun=dots$fun)
}
fun_par_inf<- function(S,F,Fprime,...){
dots<- list(dots)
value<- F(S$value,dots)$value
lin<- F(S$value,dots$formula,dots$design,dots$ncom,dots$comp)$lin+
Fprime(S$value,dots)*S$lin
list(value= value, lin=lin)
}
lixo<- fun_par_inf(arpt_eqIncome, icdfx, fprimex, formula=~eqIncome , design= des_eusilc,
ncom=nrow(eusilc) ,  comp= TRUE, htot=NULL, fun="F" )
fun_par_inf<- function(S,F,Fprime,...){
dots<- list(...)
value<- F(S$value,dots)$value
lin<- F(S$value,dots$formula,dots$design,dots$ncom,dots$comp)$lin+
Fprime(S$value,dots)*S$lin
list(value= value, lin=lin)
}
icdfx<-function(x,...){
dots<-list(...)
icdf(formula=dots$formula, design=dots$design, x=x, ncom=dots$ncom, comp=dots$comp)
}
fprimex<- function(x,...){
dots<-list(...)
densfun(formula=dots$formula, design=dots$design, x=x, htot=dots$htot, fun=dots$fun)
}
lixo<- fun_par_inf(arpt_eqIncome, icdfx, fprimex, formula=~eqIncome ,design= des_eusilc,
ncom=nrow(eusilc) ,  comp= TRUE, htot=NULL, fun="F" )
htot<-h_fun(eusilc$eqIncome, eusilc$rb050)
fprimex(20000,formula=~eqIncome, design=des_eusilc, htot=NULL,fun="F")
lixo<- fun_par_inf(arpt_eqIncome, icdfx, fprimex, formula=~eqIncome ,design= des_eusilc,
ncom=nrow(eusilc) ,  comp= TRUE, htot=NULL, fun="F" )
arpt_eqIncome
formula
?do.call
do.call("complex", list(imag = 1:3))
parse(icdf)
fun_par_inf<- function(S,F,Fprime,...){
dots<- list(...)
value<- do.call(parse(substitute(F)),c(x=S$value, dots))$value
lin<- do.call(parse(substitute(F)),c(x=S$value,dots))$lin+
do.call(parse(substitute(Fprime)),c(x=S$value,dots))*S$lin
list(value= value, lin=lin)
}
lixo<- fun_par_inf(arpt_eqIncome, icdfx, fprimex, formula=~eqIncome ,design= des_eusilc,
ncom=nrow(eusilc) ,  comp= TRUE, htot=NULL, fun="F" )
fun_par_inf<- function(S,F,Fprime,...){
dots<- list(...)
value<- do.call(F,c(x=S$value, dots))$value
lin<- do.call(F,c(x=S$value,dots))$lin+
do.call(Fprime,c(x=S$value,dots))*S$lin
list(value= value, lin=lin)
}
fun_par_inf<- function(S,F,Fprime,...){
dots<- list(...)
value<- do.call(F,c(x=S$value, dots))$value
lin<- do.call(F,c(x=S$value,dots))$lin+
do.call(Fprime,c(x=S$value,dots))*S$lin
list(value= value, lin=lin)
}
lixo<- fun_par_inf(arpt_eqIncome, "icdfx", "densfun", formula=~eqIncome ,design= des_eusilc,
ncom=nrow(eusilc) ,  comp= TRUE, htot=NULL, fun="F")
str(lixo)
arpr_eqIncome<- svyarpr(~eqIncome, design=des_eusilc, .5, .6, h = htot,
ARPT = arpt_eqIncome, ncom=nrow(eusilc), comp=TRUE)
str(arpr_eqIncome)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
roxygen2::namespace_roclet()
roxygen2::roxygenise()
