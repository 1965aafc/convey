dataset=dati, percentage=60, order_quant=50)
source('~/GitHub/convey/tests/testthat/test-svyrmpg.R')
source('~/GitHub/convey/tests/testthat/test-svyrmpg.R')
source('~/GitHub/convey/tests/testthat/test-svyrmpg.R')
vardest
100*convest
varse
100*convse
devtools:::test()
install.packages("readr")
library(vardpoor)
data(eusilc)
dati = data.frame(1:nrow(eusilc), eusilc)
colnames(dati)[1] <- "IDd"
library(survey)
# create a design object
des_eusilc <- svydesign(ids = ~db040, weights = ~rb050, data = eusilc)
library(convey)
des_eusilc <- convey_prep(des_eusilc)
vardpoor_arptd <- linarpt(Y = "eqIncome", id = "IDd", weight = "rb050", Dom = "db040",
dataset = dati, percentage = 60, order_quant = 50)
# point estimates
unlist(vardpoor_arptd$value$threshold)
# se estimates
sapply(data.frame(vardpoor_arptd$lin)[,2:10],function(t) SE_lin2(t,des_eusilc))
unlist(vardpoor_arptd$value$threshold)
sapply(data.frame(vardpoor_arptd$lin)[,2:10],function(t) SE_lin2(t,des_eusilc))
vardpoor_arprd <- linarpr(Y = "eqIncome", id = "IDd", weight = "rb050", Dom = "db040",
dataset = dati, percentage = 60, order_quant = 50)
vardestd<-unlist(vardpoor_arprd$value$arpr)
vardestd
varsed<-sapply(data.frame(vardpoor_arprd$lin)[,2:10],function(t) SE_lin2(t,des_eusilc))
atributes (varsed) <- NULL
attributes (varsed) <- NULL
varsed
fun_arprd <- svyby(~eqIncome, by = ~db040, design = des_eusilc, FUN = svyarpr, order = 0.5, percent = 0.6,deff = FALSE)
coef(fun_arprd)
attributes(convestd) <- NULL
convestd<- coef(fun_arprd)
attributes(convestd) <- NULL
convestd
SE(fun_arprd)
source('~/GitHub/convey/tests/testthat/test-svyarpr.R')
source('~/GitHub/convey/tests/testthat/test-svyarpr.R')
source('~/GitHub/convey/tests/testthat/test-svyarpr.R')
source('~/GitHub/convey/tests/testthat/test-svyarpt.R')
vardpoor_arptd <- linarpt(Y = "eqIncome", id = "IDd", weight = "rb050", Dom = "db040",
dataset = dati, percentage = 60, order_quant = 50)
#  point estimates
vardestd<-unlist(vardpoor_arptd$value$arpt)
#  se estimates
varsed<-sapply(data.frame(vardpoor_arptd$lin)[,2:10],function(t) SE_lin2(t,des_eusilc))
attributes (varsed) <- NULL
# library convey
fun_arptd <- svyby(~eqIncome, by = ~db040, design = des_eusilc, FUN = svyarpt, order = 0.5, percent = 0.6,deff = FALSE)
convestd<- coef(fun_arptd)
attributes(convestd) <- NULL
convsed<- SE(fun_arptd)
convestd
convsed
expect_equal(vardest, convest)
expect_equal(varse, convse)
expect_equal(vardestd, convestd)
vardestd
vardestd
vardpoor_arptd
unlist(vardpoor_arptd$value)
vardestd<-unlist(vardpoor_arptd$value)
#  se estimates
vardpoor_arptd
vardestd<-unlist(vardpoor_arptd$value)
vardestd
vardestd<-unlist(vardpoor_arptd$value$threshold)
vardestd
source('~/GitHub/convey/tests/testthat/test-svyarpt.R')
varsed<-sapply(data.frame(vardpoor_arptd$lin)[,2:10],function(t) SE_lin2(t,des_eusilc))
attributes (varsed) <- NULL
varsed
convestd
convsed
source('~/GitHub/convey/tests/testthat/test-svyarpt.R')
expect_equal(vardest, convest)
expect_equal(varse, convse)
expect_equal(vardestd, convestd)
expect_equal(varsed, convsed)
source('~/GitHub/convey/tests/testthat/test-svyarpt.R')
source('~/GitHub/convey/tests/testthat/test-svyarpr.R')
expect_equal(1:5,1:5)
expect_equal(c(1,2,3),c(1,2,3))
source('~/GitHub/convey/tests/testthat/test-svyarpr.R')
expect_equal(vardest,100*convest)
expect_equal(varse, 100*convse)
expect_equal(vardestd, 100*convestd)
expect_equal(varsed, 100*convsed)
})
library(vardpoor)
data(eusilc)
dati = data.frame(1:nrow(eusilc), eusilc)
colnames(dati)[1] <- "IDd"
des_eusilc <- survey:::svydesign(ids = ~db040, weights = ~rb050, data = eusilc)
des_eusilc <- convey_prep(des_eusilc)
dati <- data.frame(IDd = 1:nrow(eusilc), eusilc)
vardpoor_arptw <- linarpt(Y = "eqIncome", id = "IDd", weight = "rb050", Dom = NULL, dataset = dati, percentage = 60, order_quant = 50)
vardest<- vardpoor_arptw$value
attributes(vardest)<- NULL
vardest<- unlist(vardest)
varse<- SE_lin2(vardpoor_arptw$lin$lin_arpt, des_eusilc)
attributes(varse)<- NULL
fun_arptw <- svyarpt(~eqIncome, design = des_eusilc, 0.5, 0.6)
convest<-coef(fun_arptw)
attributes(convest)<-NULL
convse<- survey:::SE(fun_arptw)
attributes(convse)<-NULL
#domain
vardpoor_arptd <- linarpt(Y = "eqIncome", id = "IDd", weight = "rb050", Dom = "db040",
dataset = dati, percentage = 60, order_quant = 50)
#  point estimates
vardestd<-unlist(vardpoor_arptd$value$threshold)
#  se estimates
varsed<-sapply(data.frame(vardpoor_arptd$lin)[,2:10],function(t) SE_lin2(t,des_eusilc))
attributes (varsed) <- NULL
# library convey
fun_arptd <- svyby(~eqIncome, by = ~db040, design = des_eusilc, FUN = svyarpt, order = 0.5,
percent = 0.6,deff = FALSE)
convestd<- coef(fun_arptd)
attributes(convestd) <- NULL
convsed<- SE(fun_arptd)
expect_equal(vardest, convest)
expect_equal(varse, convse)
expect_equal(vardestd, convestd)
expect_equal(varsed, convsed)
})
devtools:::test()
devtools:::test()
devtools:::test()
devtools:::test()
vardpoor_ginid <- lingini(Y = "eqIncome", id = "IDd", weight = "rb050", Dom = c("db040"),    dataset = dati)
vardestd<-unlist(vardpoor_ginid$value$Gini)
vardestd
varsed<-sapply(data.frame(vardpoor_ginid$lin)[,2:10],function(t) SE_lin2(t,des_eusilc))
attributes (varsed) <- NULL
varsed
fun_ginid <- svyby(~eqIncome, by = ~db040, design = des_eusilc, FUN = svygini,deff = FALSE)
convestd<- coef(fun_ginid)
attributes(convestd) <- NULL
convestd
convsed<- SE(fun_ginid)
convsed
source('~/GitHub/convey/tests/testthat/test-svygini.R')
devtools:::test()
context("gini output")
library(vardpoor)
data(eusilc)
dati = data.frame(1:nrow(eusilc), eusilc)
colnames(dati)[1] <- "IDd"
des_eusilc <- survey:::svydesign(ids = ~db040, weights = ~rb050, data = eusilc)
des_eusilc <- convey_prep(des_eusilc)
dati <- data.frame(IDd = 1:nrow(eusilc), eusilc)
vardpoor_giniw <- lingini(Y = "eqIncome", id = "IDd", weight = "rb050",
dataset = dati)
vardest<- vardpoor_giniw$value
attributes(vardest)<- NULL
vardest<- unlist(vardest)
varse<- SE_lin2(vardpoor_giniw$lin$lin_gini, des_eusilc)
attributes(varse)<- NULL
fun_giniw <- svygini(~eqIncome, design = des_eusilc)
convest<-coef(fun_giniw)
attributes(convest)<-NULL
convse<- survey:::SE(fun_giniw)
attributes(convse)<-NULL
#domain
vardpoor_ginid <- lingini(Y = "eqIncome", id = "IDd", weight = "rb050", Dom = c("db040"),    dataset = dati)
#  point estimates
vardestd<-unlist(vardpoor_ginid$value$Gini)
#  se estimates
varsed<-sapply(data.frame(vardpoor_ginid$lin)[,2:10],function(t) SE_lin2(t,des_eusilc))
attributes (varsed) <- NULL
# library convey
fun_ginid <- svyby(~eqIncome, by = ~db040, design = des_eusilc, FUN = svygini,deff = FALSE)
convestd<- coef(fun_ginid)
attributes(convestd) <- NULL
convsed<- SE(fun_ginid)
expect_equal(vardest,100*convest)
vardest
vardest[1]
100*convest
vardestd
100*convestd
varsed
100*convsed
devtools:::test()
devtools:::test()
?:=
?'':=''
devtools:::test(filter=!"gpg")
devtools:::test(filter!="gpg")
devtools:::test(filter="gpg")
devtools:::test(filter!=gsub("gpg"))
devtools:::test(filter!=gsub(file.names()"gpg"))
devtools:::test(filter!=gsub(file.names(),"gpg"))
devtools:::test(filter="gpg")
devtools:::test(filter="ar")
devtools:::test(filter="poor")
devtools:::test(filter="rmpg")
?gregexpr
file.names(C:\Users\owner\Documents\GitHub\convey\tests\testthat)
file.names("C:\Users\owner\Documents\GitHub\convey\tests\testthat")
?file.names
?filenames
?files
list.files("C:\Users\owner\Documents\GitHub\convey\tests\testthat")
list.files("C:/Users/owner/Documents/GitHub/convey/tests/testthat")
grep(list.files("C:/Users/owner/Documents/GitHub/convey/tests/testthat"), "gpg")
context("gpg output")
library(vardpoor)
data(ses)
dati <- data.table(ID = 1:nrow(ses), ses)
setnames(dati, "sex", "sexf")
dati[sexf=="male", sex:=1]
dati[sexf=="female", sex:=2]
des_ses <- survey:::svydesign(id=~1, weights=~weights, data=ses,
variables=~weights+sex+earningsHour+education)
des_ses <- convey_prep(des_ses)
gpgs1 <- lingpg(Y="earningsHour", gender="sex", id="ID", weight="weights", dataset=dati)
vardest<- gpgs1$value
attributes(vardest)<- NULL
vardest<- unlist(vardest)
varse<- SE_lin2(gpgs1$lin$lin_gpg,des_ses)
attributes(varse)<- NULL
ses_gpg<- svygpg(~earningsHour, des_ses, ~sex)
convest<-coef(ses_gpg)
attributes(convest)<-NULL
convse<- survey:::SE(ses_gpg)
attributes(convse)<-NULL
test_that("compare results convey vs vardpoor",{
expect_equal(vardest,100*convest)
expect_equal(varse, 100*convse)
})
?devtools:::test
test_dir()
uses_testthat("convey")
devtools:::test()
?filter
libreary(convey)
library(convey)
library(testthat)
source('~/GitHub/convey/tests/testthat/test-svyarpr.R')
source('~/GitHub/convey/tests/testthat/test-svyarpr.R')
source('~/GitHub/convey/tests/testthat/test-svyarpr.R')
devtools:::test()
devtools:::test()
devtools:::test()
devtools:::test()
devtools:::test()
source('~/GitHub/convey/tests/testthat/test-svyqsr.R')
context("qsr output")
library(vardpoor)
data(eusilc)
dati = data.frame(1:nrow(eusilc), eusilc)
colnames(dati)[1] <- "IDd"
des_eusilc <- survey:::svydesign(ids = ~db040, weights = ~rb050, data = eusilc)
des_eusilc <- convey_prep(des_eusilc)
dati <- data.frame(IDd = 1:nrow(eusilc), eusilc)
vardpoor_qsrw <- linqsr(Y = "eqIncome", id = "IDd", weight = "rb050",
dataset = dati)
vardest<- vardpoor_qsrw$value
attributes(vardest)<- NULL
vardest<- unlist(vardest)
varse<- SE_lin2(vardpoor_qsrw$lin$lin_qsr, des_eusilc)
attributes(varse)<- NULL
fun_qsrw <-svyqsr(~eqIncome, design=des_eusilc, alpha= .20)
convest<-coef(fun_qsrw)
vardest
fun_qsrw <-svyqsr(~eqIncome, design=des_eusilc, alpha= .20)
fun_qsrw
convest<-coef(fun_qsrw)
attributes(convest)<-NULL
convest
vardpoor_qsrw$value[1]
vardpoor_qsrw$value$QSR
source('~/GitHub/convey/tests/testthat/test-svyqsr.R')
context("qsr output")
library(vardpoor)
data(eusilc)
dati = data.frame(1:nrow(eusilc), eusilc)
colnames(dati)[1] <- "IDd"
des_eusilc <- survey:::svydesign(ids = ~db040, weights = ~rb050, data = eusilc)
des_eusilc <- convey_prep(des_eusilc)
dati <- data.frame(IDd = 1:nrow(eusilc), eusilc)
vardpoor_qsrw <- linqsr(Y = "eqIncome", id = "IDd", weight = "rb050",
dataset = dati)
vardest<- vardpoor_qsrw$value$QSR
attributes(vardest)<- NULL
vardest<- unlist(vardest)
varse<- SE_lin2(vardpoor_qsrw$lin$lin_qsr, des_eusilc)
attributes(varse)<- NULL
fun_qsrw <-svyqsr(~eqIncome, design=des_eusilc, alpha= .20)
convest<-coef(fun_qsrw)
attributes(convest)<-NULL
convse<- survey:::SE(fun_qsrw)
attributes(convse)<-NULL
#domain
vardpoor_qsrd <- linqsr(Y = "eqIncome", id = "IDd", weight = "rb050", Dom = c("db040"),    dataset = dati)
#  point estimates
vardestd<-unlist(vardpoor_qsrd$value$qsr)
#  se estimates
varsed<-sapply(data.frame(vardpoor_qsrd$lin)[,2:10],function(t) SE_lin2(t,des_eusilc))
attributes (varsed) <- NULL
# library convey
fun_qsrd <- survey:::svyby(~eqIncome, by = ~db040, design = des_eusilc,
FUN = svyqsr,deff = FALSE)
convestd<- coef(fun_qsrd)
attributes(convestd) <- NULL
convsed<- survey:::SE(fun_qsrd)
test_that("compare results convey vs vardpoor",{
expect_equal(vardest[1],100*convest)
expect_equal(varse, 100*convse)
expect_equal(vardestd, 100*convestd)
expect_equal(varsed, 100*convsed )
})
vardest
100*convest
varse
100*convse
vardest
convest
varse
convse
vardestd
vardestd
vardestd<-unlist(vardpoor_qsrd$value$QSR)
#  se estimates
varsed<-sapply(data.frame(vardpoor_qsrd$lin)[,2:10],function(t) SE_lin2(t,des_eusilc))
attributes (varsed) <- NULL
# library convey
fun_qsrd <- survey:::svyby(~eqIncome, by = ~db040, design = des_eusilc,
FUN = svyqsr,deff = FALSE)
convestd<- coef(fun_qsrd)
attributes(convestd) <- NULL
convsed<- survey:::SE(fun_qsrd)
test_that("compare results convey vs vardpoor",{
expect_equal(vardest,convest)
expect_equal(varse, convse)
expect_equal(vardestd, convestd)
expect_equal(varsed, 100*convsed )
})
vardestd
convestd
varsed
convsed
source('~/GitHub/convey/tests/testthat/test-svyqsr.R')
devtools:::test(filter="qsr")
devtools:::test(filter="rmpg")
vardpoor_linrmpgw <- linrmpg(Y="eqIncome", id="IDd", weight = "rb050", Dom=NULL,
dataset=dati, percentage=60, order_quant=50)
vardest<- vardpoor_linrmpgw$value
attributes(vardest)<- NULL
vardest
attributes(vardest)<- NULL
vardest<- unlist(vardest)
vardest
source('~/GitHub/convey/tests/testthat/test-svyrmpg.R')
vardpoor_rmpgd <- linrmpg(Y = "eqIncome", id = "IDd", weight = "rb050", Dom = c("db040"),    dataset = dati)
#  point estimates
vardestd<-unlist(vardpoor_rmpgd$value$rmpg)
#  se estimates
varsed<-sapply(data.frame(vardpoor_rmpgd$lin)[,2:10],function(t) SE_lin2(t,des_eusilc))
attributes (varsed) <- NULL
vardestd
varsed
source('~/GitHub/convey/tests/testthat/test-svyrmpg.R')
devtools:::test(filter="rmpg")
vardestd
convestd
devtools:::test(filter="rmpg")
library(convey)
library(vardpoor)
data(eusilc)
library(survey)
des_eusilc <- svydesign(ids=~db040, weights=~rb050, data=eusilc)
des_eusilc <- convey_prep( des_eusilc )
arpr_eqIncome<- svyarpr(~eqIncome, design=des_eusilc, .5, .6, comp=TRUE)
des_eusilc_rep<- as.svyrepdesign(des_eusilc, type="bootstrap")
des_eusilc_rep<- as.svrepdesign(des_eusilc, type="bootstrap")
svyarpr(~eqIncome, des_eusilc_rep, 0.5, 0.6)
debugonce(convey:::svyarpr.svyrep.design)
svyarpr(~eqIncome, des_eusilc_rep, 0.5, 0.6)
rval
str(ww)
str(qq)
variance
svyarpr(~eqIncome, des_eusilc_rep, 0.5, 0.6)
debugonce(convey:::svyarpr.svyrep.design)
svyarpr(~eqIncome, des_eusilc_rep, 0.5, 0.6)
strsplit(as.character(formula)[[2]],
" \\+ ")[[1]]
names(rval)
rownames(variance)
variance
rval
devtools:::document()
library(vardpoor)
data(eusilc)
library(survey)
des_eusilc <- svydesign(ids=~db040, weights=~rb050, data=eusilc)
des_eusilc <- convey_prep( des_eusilc )
library(convey)
des_eusilc <- convey_prep( des_eusilc )
arpr_eqIncome<- svyarpr(~eqIncome, design=des_eusilc, .5, .6, comp=TRUE)
des_eusilc_rep<- as.svrepdesign(des_eusilc, type="bootstrap")
svyarpr(~eqIncome, des_eusilc_rep, 0.5, 0.6)
arpr_eqIncome
gini_eqIncome <- svygini(~eqIncome, design=des_eusilc)
des_eusilc_rep<- as.svrepdesign(des_eusilc, type="bootstrap")
svygini(~eqIncome, des_eusilc_rep)
gini_eqIncome
qsr_eqIncome<- svyqsr(~eqIncome, design=des_eusilc, alpha= .20)
des_eusilc_rep<- as.svrepdesign(des_eusilc, type="bootstrap")
svyqsr(~eqIncome, design=des_eusilc, alpha= .20)
qsr_eqIncome
svyqsr(~eqIncome, design=des_eusilc_rep, alpha= .20)
rmir_eusilc<- svyrmir(~eqIncome, des_eusilc, age=~age, agelim = 65, order=.50 )
des_eusilc_rep<- as.svrepdesign(des_eusilc, type="bootstrap")
svyrmir(~eqIncome, des_eusilc, age=~age, agelim = 65, order=.50 )
rmir_eusilc
svyrmir(~eqIncome, des_eusilc_rep, age=~age, agelim = 65, order=.50 )
devtools:::document()
devtools::use_vignette("Library convey")
devtools:::document()
?data
?data
data(eusilc, library= "vardpoor")
data("eusilc", library= "vardpoor")
data("eusilc", package =  "vardpoor")
data(eusilc, package =  "vardpoor")
library(vardpoor)
data(eusilc)
library(vardpoor)
data(eusilc)
dati = data.frame(1:nrow(eusilc), eusilc)
colnames(dati)[1] <- "IDd"
library(survey)
# create a design object
des_eusilc <- svydesign(ids = ~db040, weights = ~rb050, data = eusilc)
des_eusilc_rep <- as.svrepdesign(des_eusilc, type = "bootstrap")
library(convey)
des_eusilc <- convey_prep(des_eusilc
vardpoor::
des_eusilc <- convey_prep(des_eusilc)
svyarpt(~eqIncome, design = des_eusilc_rep, 0.5, 0.6)
svyby(~eqIncome, by = ~db040, design = des_eusilc_rep, FUN = svyarpt, order = 0.5, percent = 0.6, deff = FALSE)
svyby(~eqIncome, by = ~db040, design = des_eusilc_rep, FUN = svyarpr, order = 0.5, percent = 0.6, deff = FALSE)
svyby(~eqIncome, by = ~db040, design = des_eusilc_rep, FUN = svyarmpg, order = 0.5, percent = 0.6, deff = FALSE)
svyby(~eqIncome, by = ~db040, design = des_eusilc_rep, FUN = svyrmpg, order = 0.5, percent = 0.6, deff = FALSE)
svyby(~eqIncome, by = ~db040, design = des_eusilc_rep, FUN = svyqsr, alpha=.2, deff = FALSE)
svyby(~eqIncome, by = ~db040, design = des_eusilc_rep, FUN = svygini, deff = FALSE)
svyby(~eqIncome, by = ~db040, design = des_eusilc, FUN = svygini, deff = FALSE)
debugonce(convey:::svyarpt.svyrep.design)
svyby(~eqIncome, by = ~db040, design = des_eusilc_rep, FUN = svyarpt, order = 0.5, percent = 0.6, deff = FALSE)
quant_val
computeQuantiles
convey:::computeQuantiles
weights(des_eusilc_rep, "analysis")-> lixo
str(lixo)
des_eusilc_rep_Tyrol <- subset(des_eusilc_rep, db040=="Tyrol" )
svyarpt(~eqIncome, design = des_eusilc_rep_Tyrol, 0.5, 0.6)
debugonce(svyarpt)
debugonce(convey:::svyarpt.svyrep.design)
svyarpt(~eqIncome, design = des_eusilc_rep_Tyrol, 0.5, 0.6)
svyarpt(~eqIncome, design = des_eusilc_rep_Tyrol, 0.5, 0.6)
dim(df)
quant_val
rval
dim(ww)
computeQuantiles(incvar,ww[,1],order)
computeQuantiles(incvar,ww[,2],order)
for(i in 1:50)computeQuantiles(incvar,ww[,i],order)
computeQuantiles(incvar,ww[,3],order)
computeQuantiles(incvar,ww[,4],order)
computeQuantiles(incvar,lixo[,4], 0.5)
convey:::computeQuantiles(incvar,lixo[,4], 0.5)
convey:::computeQuantiles(des_eusilc_rep_Tyrol$variables$eqIncome,lixo[,4], 0.5)
length(des_eusilc_rep_Tyrol$variables$eqIncome)
convey:::computeQuantiles(des_eusilc_rep_Tyrol$variables$eqIncome,lixo[,1], 0.5)
convey:::computeQuantiles(des_eusilc_rep_Tyrol$variables$eqIncome,lixo[,2], 0.5)
convey:::computeQuantiles(des_eusilc_rep_Tyrol$variables$eqIncome,lixo[,3], 0.5)
convey:::computeQuantiles(des_eusilc_rep_Tyrol$variables$eqIncome,lixo[,4], 0.5)
convey:::computeQuantiles(des_eusilc_rep_Tyrol$variables$eqIncome,lixo[,5], 0.5)
convey:::computeQuantiles(des_eusilc_rep_Tyrol$variables$eqIncome,lixo[,6], 0.5)
convey:::computeQuantiles(des_eusilc_rep_Tyrol$variables$eqIncome,lixo[,7], 0.5)
convey:::computeQuantiles(des_eusilc_rep_Tyrol$variables$eqIncome,lixo[,7], 0.5)
View(lixo)
dim(des_eusilc_rep_Tyrol)
all.equal(lixo[,4],lixo[,5])
summary(lixo[,4],lixo[,5])
summary(lixo[,4])
summary(lixo[,5])
View(lixo)
incvar<-des_eusilc_rep_Tyrol$variables$eqIncome
for(i in 1:50){
convey:::computeQuantiles(incvar,  lixo[,i], p = .5)
print(i)
}
for(i in 1:50){
print(convey:::computeQuantiles(incvar,  lixo[,i], p = .5))
print(i)
}
convey:::computeQuantiles
svyby(des_eusilc_rep, by=~db040, FUN = svyquantile, .5)
svyby(~eqIncome, by=~db040, design= des_eusilc_rep, by=~db040, FUN = svyquantile, .5)
svyby(~eqIncome, by=~db040, design= des_eusilc_rep, FUN = svyquantile, .5)
devtools:::document()
