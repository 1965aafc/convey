incvar<-df[[as.character(inc)]]
alpha1<- alpha
alpha2<- 1-alpha
quant_inf <-  svyquantile(x = formula, design = design, alpha1, method = "constant")
quant_inf<-as.vector(quant_inf)
quant_sup <- svyquantile(x = formula, design = design, alpha2, method = "constant")
quant_sup<-as.vector(quant_sup)
tot_var<- coef(svytotal(x=formula, design = design))
S80 <- coef(svytotal(x= formula ,subset(design = design, incvar > quant_sup)))
S20 <- coef(svytotal(~eqIncome,subset(design = design, incvar<= quant_inf)))
qsr<- S80/S20
# Linearization of S20
lin_S20 <- isq(formula = formula, design = design, alpha1, type="inf")
# Linearization of S80
lin_S80 <- isq(formula = formula, design = design, alpha2, type="sup")
# LINEARIZED VARIABLE OF THE SHARE RATIO
lin_share_ratio<-(S20*lin_S80-S80*lin_S20)/(S20*S20)
# estimate variance
design$variables$lin_share_ratio <- lin_share_ratio
lin_share_ratio_tot <- svytotal(~lin_share_ratio,design= design)
var_lin_share_ratio <- attr(lin_share_ratio_tot, "var")
list_share_ratio <- list(value = share_ratio, se = sqrt(var_lin_share_ratio ),
lin = lin_share_ratio )
list_share_ratio
}
d4<-svyqsr(~eqIncome, des_eusilc, .20)
svyqsr <- function(formula, design, alpha= .20) {
inc <- terms.formula(formula)[[2]]
df <- model.frame(design)
incvar<-df[[as.character(inc)]]
alpha1<- alpha
alpha2<- 1-alpha
quant_inf <-  svyquantile(x = formula, design = design, alpha1, method = "constant")
quant_inf<-as.vector(quant_inf)
quant_sup <- svyquantile(x = formula, design = design, alpha2, method = "constant")
quant_sup<-as.vector(quant_sup)
tot_var<- coef(svytotal(x=formula, design = design))
dsub80<- subset (design, subset= (incvar > quant_sup))
S80 <- coef(svytotal(x= formula ,dsub80))
dsub20<- subset (design, subset= (incvar<= quant_inf))
S20 <- coef(svytotal(~eqIncome,dsub20))
qsr<- S80/S20
# Linearization of S20
lin_S20 <- isq(formula = formula, design = design, alpha1, type="inf")
# Linearization of S80
lin_S80 <- isq(formula = formula, design = design, alpha2, type="sup")
# LINEARIZED VARIABLE OF THE SHARE RATIO
lin_share_ratio<-(S20*lin_S80-S80*lin_S20)/(S20*S20)
# estimate variance
design$variables$lin_share_ratio <- lin_share_ratio
lin_share_ratio_tot <- svytotal(~lin_share_ratio,design= design)
var_lin_share_ratio <- attr(lin_share_ratio_tot, "var")
list_share_ratio <- list(value = share_ratio, se = sqrt(var_lin_share_ratio ),
lin = lin_share_ratio )
list_share_ratio
}
# example
d4<-svyqsr(~eqIncome, des_eusilc, .20)
str(d4)
getwd()
svygini<- function(formula, design){
inc <- terms.formula(formula)[[2]]
w<- weights(design)
df <- model.frame(design)
incvar<-df[[as.character(inc)]]
incvar <-incvar[order(incvar)]
w<-w[order(incvar)]
# population size
N <-  sum(w)
# sample size
n<-length(inc)
# total income
T <- sum(incvar*w)
# cumulative weight
r <- cumsum(w)
Num <- sum((2*r-1)*incvar*w)
Den <- N*T
# Gini coeficient
Gini<-(Num/Den)-1
# cumulative distribution function
F<-cumsum(w/N)
# partial weighted function
G<-cumsum(incvar*w)
# Gini coefficient linerized variable
lin_gini<-(2*(T-G+incvar*w+N*(incvar*F))-inc-(Gini+1)*(T+N*incvar))/(N*T)
# variance estimation
design$variables$lin_gini <- lin_gini
lin_gini_tot<-svytotal(~lin_gini,design = design)
gini_var<-attr(lin_gini_tot, "var")
list_gini<-list(gini_coef=Gini,gini_var=gini_var, lin = lin_gini)
list_gini
}
d5 <- svygini(~eqIncome, des_eusilc)
svygini<- function(formula, design){
inc <- terms.formula(formula)[[2]]
w<- weights(design)
df <- model.frame(design)
incvar<-df[[as.character(inc)]]
incvar <-incvar[order(incvar)]
w<-w[order(incvar)]
# population size
N <-  sum(w)
# sample size
n<-length(inc)
# total income
T <- sum(incvar*w)
# cumulative weight
r <- cumsum(w)
Num <- sum((2*r-1)*incvar*w)
Den <- N*T
# Gini coeficient
Gini<-(Num/Den)-1
# cumulative distribution function
F<-cumsum(w/N)
# partial weighted function
G<-cumsum(incvar*w)
# Gini coefficient linerized variable
lin_gini<-(2*(T-G+incvar*w+N*(incvar*F))-incvar-(Gini+1)*(T+N*incvar))/(N*T)
# variance estimation
design$variables$lin_gini <- lin_gini
lin_gini_tot<-svytotal(~lin_gini,design = design)
gini_var<-attr(lin_gini_tot, "var")
list_gini<-list(gini_coef=Gini,gini_var=gini_var, lin = lin_gini)
list_gini
}
d5 <- svygini(~eqIncome, des_eusilc)
str(d5)
source('~/GitHub/convey/all_funs.R', echo=TRUE)
args(svyquantile)
d1 <-  svyarpt(~eqIncome, des_eusilc, .5, .6)
source('~/GitHub/convey/all_funs.R', echo=TRUE)
d1 <-  svyarpt(~eqIncome, des_eusilc, .5, .6)
str(d1)
d2 <-svyarpr(~eqIncome, des_eusilc, .5, .6)
str(d2)
svyarpr <- function(formula, design, order, percent){
inc <- terms.formula(formula)[[2]]
df <- model.frame(design)
incvar<-df[[as.character(inc)]]
list_ARPT <- svyarpt(formula = formula, design = design,
order = order, percent = percent)
ARPT <- list_ARPT$value
lin_ARPT <- list_ARPT$lin
poor <- (incvar < ARPT) *1
design$variables$poor <- poor
ARPR <- svymean (~poor, design = design)
ARPR <- coef (ARPR)
lin_ARPR <- icdf(formula = formula, design = design, ARPT) +
densfun(formula = formula, design = design , ARPT, type="F")*lin_ARPT
# compute variance
design$variables$lin_ARPR <- lin_ARPR
lin_ARPR_tot<-svytotal(~lin_ARPR, design = design)
var_ARPR<-attr(lin_ARPR_tot, "var")
list_ARPR<-list(value = ARPR, se = sqrt(var_ARPR) , lin = lin_ARPR)
list_ARPR
}
# example
d2 <-svyarpr(~eqIncome, des_eusilc, .5, .6)
str(d2)
d3<- svyrmpg(~eqIncome, des_eusilc, .5, .6)
str(d3)
d4<-svyqsr(~eqIncome, des_eusilc, .20)
svyqsr <- function(formula, design, alpha= .20) {
inc <- terms.formula(formula)[[2]]
df <- model.frame(design)
incvar<-df[[as.character(inc)]]
alpha1<- alpha
alpha2<- 1-alpha
quant_inf <-  svyquantile(x = formula, design = design, quantiles = alpha1, method = "constant")
quant_inf<-as.vector(quant_inf)
quant_sup <- svyquantile(x = formula, design = design, quantiles= alpha2, method = "constant")
quant_sup <- as.vector(quant_sup)
tot_var<- coef(svytotal(x=formula, design = design))
dsub80<- subset (design, subset= (incvar > quant_sup))
S80 <- coef(svytotal(x= formula ,dsub80))
dsub20<- subset (design, subset= (incvar<= quant_inf))
S20 <- coef(svytotal(~eqIncome,dsub20))
qsr<- S80/S20
# Linearization of S20
lin_S20 <- isq(formula = formula, design = design, alpha1, type="inf")
# Linearization of S80
lin_S80 <- isq(formula = formula, design = design, alpha2, type="sup")
# LINEARIZED VARIABLE OF THE SHARE RATIO
lin_share_ratio<-(S20*lin_S80-S80*lin_S20)/(S20*S20)
# estimate variance
design$variables$lin_share_ratio <- lin_share_ratio
lin_share_ratio_tot <- svytotal(~lin_share_ratio,design= design)
var_lin_share_ratio <- attr(lin_share_ratio_tot, "var")
list_share_ratio <- list(value = share_ratio, se = sqrt(var_lin_share_ratio ),
lin = lin_share_ratio )
list_share_ratio
}
# example
d4<-svyqsr(~eqIncome, des_eusilc, .20)
str(d4)
svyqsr <- function(formula, design, alpha= .20) {
inc <- terms.formula(formula)[[2]]
df <- model.frame(design)
incvar<-df[[as.character(inc)]]
alpha1<- alpha
alpha2<- 1-alpha
quant_inf <-  svyquantile(x = formula, design = design, quantiles = alpha1,
method = "constant")
quant_inf<-as.vector(quant_inf)
quant_sup <- svyquantile(x = formula, design = design, quantiles= alpha2,
method = "constant")
quant_sup <- as.vector(quant_sup)
tot_var<- coef(svytotal(x=formula, design = design))
dsub80<- subset (design, subset= (incvar > quant_sup))
S80 <- coef(svytotal(x= formula ,dsub80))
dsub20<- subset (design, subset= (incvar<= quant_inf))
S20 <- coef(svytotal(x= formula,dsub20))
qsr<- S80/S20
# Linearization of S20
lin_S20 <- isq(formula = formula, design = design, alpha1, type="inf")
# Linearization of S80
lin_S80 <- isq(formula = formula, design = design, alpha2, type="sup")
# LINEARIZED VARIABLE OF THE SHARE RATIO
lin_share_ratio<-(S20*lin_S80-S80*lin_S20)/(S20*S20)
# estimate variance
design$variables$lin_share_ratio <- lin_share_ratio
lin_share_ratio_tot <- svytotal(~lin_share_ratio,design= design)
var_lin_share_ratio <- attr(lin_share_ratio_tot, "var")
list_share_ratio <- list(value = share_ratio, se = sqrt(var_lin_share_ratio ),
lin = lin_share_ratio )
list_share_ratio
}
# example
d4<-svyqsr(~eqIncome, des_eusilc, .20)
str(d4)
isq <- function(formula, design, alpha,type=c("inf","sup")){
inc <- terms.formula(formula)[[2]]
df <- model.frame(design)
incvar<-df[[as.character(inc)]]
q_alpha<- svyquantile(x =formula, design =design, quantiles = alpha, method="constant")
q_alpha<- as.vector(q_alpha)
w <- weights(design)
N <- sum (w)
Fprime<- densfun(formula = formula , design = design, q_alpha, type="S")
iq<- iqalpha(formula = formula, design = design, alpha)
isqalpha <- incvar*((incvar<=q_alpha))+ Fprime*iq
if(type=="inf")ires<- isqalpha else ires<- incvar - isqalpha
res
}
d4<-svyqsr(~eqIncome, des_eusilc, .20)
isq <- function(formula, design, alpha,type=c("inf","sup")){
inc <- terms.formula(formula)[[2]]
df <- model.frame(design)
incvar<-df[[as.character(inc)]]
q_alpha<- svyquantile(x =formula, design =design, quantiles = alpha, method="constant")
q_alpha<- as.vector(q_alpha)
w <- weights(design)
N <- sum (w)
Fprime<- densfun(formula = formula , design = design, q_alpha, type="S")
iq<- iqalpha(formula = formula, design = design, alpha)
isqalpha <- incvar*((incvar<=q_alpha))+ Fprime*iq
if(type=="inf")ires<- isqalpha else ires<- incvar - isqalpha
ires
}
d4<-svyqsr(~eqIncome, des_eusilc, .20)
source('~/GitHub/convey/all_funs.R', echo=TRUE)
d1 <-  svyarpt(~eqIncome, des_eusilc, .5, .6)
str(d1)
d2 <-svyarpr(~eqIncome, des_eusilc, .5, .6)
str(d2)
d3<- svyrmpg(~eqIncome, des_eusilc, .5, .6)
str(d3)
d4<-svyqsr(~eqIncome, des_eusilc, .20)
str(d4)
d5 <- svygini(~eqIncome, des_eusilc)
str(d5)
dati <- data.frame(IDd = 1:nrow(eusilc), eusilc)
d1vardpoor <- linarpt(Y="eqIncome", id="IDd", weight = "rb050", Dom = NULL,
dataset = dati, percentage = 60, order_quant=50)
d1vardpoor$value
summary(d1vardpoor$lin)
d1$value
summary(d1$lin)
d2vardpoor <- linarpt(Y="eqIncome", id="IDd", weight = "rb050", Dom = NULL,
dataset = dati, percentage = 60, order_quant=50)
d2vardpoor$value
summary(d2vardpoor$lin$lin_arpt)
d2vardpoor <- linarpt(Y="eqIncome", id="IDd", weight = "rb050", Dom = NULL,
dataset = dati, percentage = 60, order_quant=50)
d2vardpoor$value
summary(d2vardpoor$lin$lin_arpt)
d2vardpoor <- linarpr(Y="eqIncome", id="IDd", weight = "rb050", Dom = NULL,
dataset = dati, percentage = 60, order_quant=50)
d2vardpoor$value
summary(d2vardpoor$lin$lin_arpt)
summary(d2vardpoor$lin)
d2 <-svyarpr(~eqIncome, des_eusilc, .5, .6)
d2$value
summary(d2$lin)
d3vardpoor <- linqsr(Y="eqIncome", id="IDd", weight="rb050",
Dom=NULL, dataset= dati, alpha=20)
d3vardpoor$value
summary(d3vardpoor$lin)
d3vardpoor<-linrmpg(Y="eqIncome", id="IDd", weight="rb050", Dom=NULL,
dataset=dati, percentage=60, order_quant=50)
d3vardpoor$value
summary(d3vardpoor$lin)
d3<- svyrmpg(~eqIncome, des_eusilc, .5, .6)
d3$value
summary(d3$lin)
d4vardpoor <- linqsr(Y="eqIncome", id="IDd", weight="rb050",
Dom=NULL, dataset= dati, alpha=20)
d4vardpoor$value
summary(d4vardpoor$lin)
d4<-svyqsr(~eqIncome, des_eusilc, .20)
d4$value
summary(d4$lin)
d5vardpoor<-lingini(Y="eqIncome", id="IDd", weight="rb050", dataset=dati)
d5vardpoor<-lingini(Y="eqIncome", id="IDd", weight="rb050", dataset=dati)
d5vardpoor$value
summary(d5vardpoor$lin)
d5 <- svygini(~eqIncome, des_eusilc)
d5$gini_coef
summary(d5$lin)
library(survey)
data(api)
dclus1<-svydesign(id=~dnum, weights=~pw, data=apiclus1, fpc=~fpc)
class(svyquantile(~api00, dclus1, c(.25,.5,.75),ci=TRUE))
a <- svytotal(~api00+enroll+api99, dclus1)
a
class(a)
str(a)
svycontrast(a, quote(api00/api99))
3989986/ 3759623
moments<-svymean(~I(api00^3)+I(api00^2)+I(api00), dclus1)
class(moments)
moments
str(moments)
svycontrast(moments,
quote((`I(api00^3)`-3*`I(api00^2)`*`I(api00)`+ 3*`I(api00)`*`I(api00)`^2-`I(api00)`^3)/
(`I(api00^2)`-`I(api00)`^2)^1.5))
dx2x <- deriv(~ x^2, "x") ; dx2x
gini.exp<-expression((2x-y)/(yz))
gini.exp<-expression((2x-y)/(y*z))
gini.exp<-expression((2*x-y)/(y*z))
D(gini.exp)
D(gini.exp,"x")
deriv(gini.exp,c("x","y","z"))
source('~/GitHub/convey/all_funs.R', echo=TRUE)
formula <- ~eqIncome
design<- des_eusilc
inc <- terms.formula(formula)[[2]]
w<- weights(design)
df <- model.frame(design)
incvar<-df[[as.character(inc)]]
incvar <-incvar[order(incvar)]
w<-w[order(incvar)]
# population size
N <-  sum(w)
# sample size
n<-length(inc)
# total income
T <- sum(incvar*w)
# cumulative weight
r <- cumsum(w)
Num <- sum((2*r-1)*incvar*w)
Den <- N*T
# Gini coeficient
Gini<-(Num/Den)-1
Num
N
T
1.62751e+11/N
1.62751e+11/T
summary(incvar)
summary(w)
Den
T
class(incvar)
incvar[1:100]
w[1:100]
order(incvar)[1:100]
source('~/GitHub/convey/all_funs.R', echo=TRUE)
source('~/GitHub/convey/all_funs.R', echo=TRUE)
source('~/GitHub/convey/all_funs.R', echo=TRUE)
source('~/GitHub/convey/all_funs.R', echo=TRUE)
linmedp <- (.5*linarpt-ifmedp-.5*arpr)/Fprimemedp
source('~/GitHub/convey/all_funs.R', echo=TRUE)
source('~/GitHub/convey/all_funs.R', echo=TRUE)
source('~/GitHub/convey/all_funs.R', echo=TRUE)
library(survey)
data(api)
dclus1<-svydesign(id=~dnum, weights=~pw, data=apiclus1, fpc=~fpc)
svyratio(~api.stu, ~enroll, dclus1)
ratio_api_enroll<-svyratio(~api.stu, ~enroll, dclus1)
Xhat<-svytotal(~enroll,dclus1)
linratio <- (apiclus$api.stu-coef(ratio_api_enroll)*apiclus$enroll)/coef(Xhat)
linratio <- (apiclus$api.stu-coef(ratio_api_enroll)*apiclus1$enroll)/coef(Xhat)
linratio <- (apiclus1$api.stu-coef(ratio_api_enroll)*apiclus1$enroll)/coef(Xhat)
svytotal(linratio,dclus1)
deriv(x+y,"x")
deriv(expression(x+y),"x")
lixo<-deriv(expression(x+y),"x")
str(lixo)
deriv
?expression
expression(1 + 0:9))
expression(1 + 0:9)
I
Inf <- function(expression(I(a*T+b*S))) expression(a*IT+b*IS)
?deriv
dx2x <- deriv(~ x^2, "x") ; dx2x
dx2x <- deriv3(~ x^2, "x") ; dx2x
trig.exp <- expression(sin(cos(x + y^2)))
trig.exp
expression(I(a*T+b*S))
expression(a*IT+b*IS)
comb_lin<-function(expression(expression(I(a*T+b*S))))expression(a*IT+b*IS)
comb_lin<-function(expression(I(a*T+b*S)))expression(a*IT+b*IS)
comb_lin<-function(expression(I(a*T+b*S))) expression(a*IT+b*IS)
expression(I(a*T+b*S))
library(vardpoor)
data(eusilc)
dati <- data.table(IDd = 1:nrow(eusilc), eusilc)
d2 <- linarpt(Y="eqIncome", id="IDd", weight = "rb050", Dom = "db040",
dataset = dati, percentage = 60, order_quant=50)
d2$value
library(survey)
svyby
?svyby
setwd("~/GitHub/convey")
source('~/GitHub/convey/deriv_rules.R', echo=TRUE)
source('~/GitHub/convey/all_funs.R', echo=TRUE)
summary(eusilc$eqIncome)
des_eusilc <- update(des_eusilc, num = (eqIncome<= 20000)*1)
des_eusilc <- update(des_eusilc, den= rep(1,nrow(model.frame(des_eusilc))))
NUM<-itot(~num,des_eusilc)
itot<- function(formula,design){
inc <- terms.formula(formula)[[2]]
df <- model.frame(design)
incvar<-df[[as.character(inc)]]
value<-coef(svytotal(formula=formula,design=design))
lin<- incvar
list(value=value, lin=lin)
}
itot<- function(formula,design){
inc <- terms.formula(formula)[[2]]
df <- model.frame(design)
incvar<-df[[as.character(inc)]]
value<-coef(svytotal(x=formula,design=design))
lin<- incvar
list(value=value, lin=lin)
}
NUM<-itot(~num, des_eusilc)
DEN<-itot(~den, des_eusilc)
resul<- ratio_inf(NUM,DEN)
str(resul)
resul_icdf-icdf(~eqIncome,des_eusilc, 20000)
resul_icdf<-icdf(~eqIncome,des_eusilc, 20000)
str(resul_icdf)
?solve
solve(diag(1:5),(1:5)*2)
solve(10,5)
?`diag
?diag
diag(1,3,3)
diag(5,3,3)
icdf1<-function(formula, design, x,...){
inc <- terms.formula(formula)[[2]]
df <- model.frame(design)
incvar<-df[[as.character(inc)]]
w <- weights(design)
N <- sum (w)
poor<- (incvar<=x)*1
one <- rep(1, length(incvar))
design <- update(design, poor = poor, one=one)
NUM <- itot(~num, des_eusilc)
DEN <- itot(~den, des_eusilc)
cdf_fun <- NUM$value/DEN$value
inf_fun<-ratio_inf(NUM,DEN)
inf_fun
}
icdf1(~eqIncome,des_eusilc, 20000)->lixo
str(lixo)
ratio_inf<-function(T, S){
value <- T$value/S$value
(S$value*T$lin-T$value*S$lin)/((S$value)^2)
list(value=value, lin=lin)
}
icdf1(~eqIncome,des_eusilc, 20000)->lixo
icdf1<-function(formula, design, x,...){
inc <- terms.formula(formula)[[2]]
df <- model.frame(design)
incvar<-df[[as.character(inc)]]
poor<- (incvar<=x)*1
one <- rep(1, length(incvar))
design <- update(design, poor = poor, one=one)
NUM <- itot(~num, des_eusilc)
DEN <- itot(~den, des_eusilc)
cdf_fun <- NUM$value/DEN$value
inf_fun<-ratio_inf(NUM,DEN)$lin
list(value=cdf_fun, lin=inf_fun)
}
icdf1(~eqIncome,des_eusilc, 20000)->lixo
ratio_inf<-function(T, S){
value <- T$value/S$value
lin <- (S$value*T$lin-T$value*S$lin)/((S$value)^2)
list(value=value, lin=lin)
}
icdf1(~eqIncome,des_eusilc, 20000)->lixo
str(lixo)
MED<-svyquantile(~eqIncome,des_eusilc,quantiles=.5)
MED
MED<-as.vector(MED)
MED
SMED<- list(value=MED,lin=NULL)
cdf
