htot <- h_fun(eusilc$eqIncome, eusilc$rb050)
des_eusilc <- svydesign(ids=~db040, weights=~rb050, data=eusilc)
icdf_eqIncome <-icdf(~eqIncome, design=des_eusilc, 20000, ncom=nrow(eusilc), comp=TRUE)
icdf_eqIncome$value
str(icdf_eqIncome)
icdf1 <- function(formula, design, x, ncom, comp, ...) {
inc <- terms.formula(formula)[[2]]
df <- model.frame(design)
incvar <- df[[as.character(inc)]]
w <- weights(design)
ind <- names(w)
N <- sum(w)
poor <- (incvar <= x) * 1
design <- update(design, poor = poor)
num_obj <- list(value=sum(poor*w), lin=poor)
den_obj<-list(value=N, lin=rep(1,length(w)))
cdflin<-ratio_inf(num_obj,den_obj)
df_fun <- cdflin$value
inf_fun <- cdflin$lin
names(inf_fun) <- ind
inf_fun_comp <- complete(inf_fun, ncom)
if (comp)
lin <- inf_fun_comp else lin <- inf_fun
list(value = cdf_fun, lin = lin)
}
icdf_eqIncome1 <-icdf1(~eqIncome, design=des_eusilc, 20000, ncom=nrow(eusilc), comp=TRUE)
icdf1 <- function(formula, design, x, ncom, comp, ...) {
inc <- terms.formula(formula)[[2]]
df <- model.frame(design)
incvar <- df[[as.character(inc)]]
w <- weights(design)
ind <- names(w)
N <- sum(w)
poor <- (incvar <= x) * 1
design <- update(design, poor = poor)
num_obj <- list(value=sum(poor*w), lin=poor)
den_obj<-list(value=N, lin=rep(1,length(w)))
cdflin<-ratio_inf(num_obj,den_obj)
cdf_fun <- cdflin$value
inf_fun <- cdflin$lin
names(inf_fun) <- ind
inf_fun_comp <- complete(inf_fun, ncom)
if (comp)
lin <- inf_fun_comp else lin <- inf_fun
list(value = cdf_fun, lin = lin)
}
icdf_eqIncome1 <-icdf1(~eqIncome, design=des_eusilc, 20000, ncom=nrow(eusilc), comp=TRUE)
str(icdf_eqIncome1)
str(icdf_eqIncome)
icdf1 <- function(formula, design, x, ncom, comp, ...) {
inc <- terms.formula(formula)[[2]]
df <- model.frame(design)
incvar <- df[[as.character(inc)]]
w <- weights(design)
ind <- names(w)
poor <- (incvar <= x) * 1
num_obj <- list(value=sum(poor*w), lin=poor)
den_obj<-list(value=sum(w), lin=rep(1,length(w)))
cdflin<-ratio_inf(num_obj,den_obj)
cdf_fun <- cdflin$value
inf_fun <- cdflin$lin
names(inf_fun) <- ind
inf_fun_comp <- complete(inf_fun, ncom)
if (comp)
lin <- inf_fun_comp else lin <- inf_fun
list(value = cdf_fun, lin = lin)
}
icdf_eqIncome1 <-icdf1(~eqIncome, design=des_eusilc, 20000, ncom=nrow(eusilc), comp=TRUE)
str(icdf_eqIncome1)
des_Tyrol<-subset(des_eusilc, db040==Tyrol)
des_Tyrol<-subset(des_eusilc, db040=="Tyrol")
icdf_eqIncome <-icdf(~eqIncome, design=des_Tyrol, 20000, ncom=nrow(eusilc), comp=TRUE)
icdf_eqIncome1 <-icdf1(~eqIncome, design=des_Tyrol, 20000, ncom=nrow(eusilc), comp=TRUE)
str(icdf_eqIncome)
str(icdf_eqIncome1)
SE_lin(icdf_eqIncome,des_eusilc )
SE_lin(icdf_eqIncome1,des_eusilc )
all.equal(icdf_eqIncome$lin,icdf_eqIncome1$lin)
icdf_eqIncome <-icdf(~eqIncome, design=des_Tyrol, 20000, ncom=nrow(eusilc), comp=TRUE)
icdf_eqIncome1 <-icdf1(~eqIncome, design=des_Tyrol, 20000, ncom=nrow(eusilc), comp=TRUE)
all.equal(icdf_eqIncome$lin,icdf_eqIncome1$lin)
SE_lin(icdf_eqIncome,des_eusilc )
SE_lin(icdf_eqIncome1,des_eusilc )
all.equal(icdf_eqIncome,icdf_eqIncome1)
all.equal(SE_lin(icdf_eqIncome,des_eusilc ),SE_lin(icdf_eqIncome1,des_eusilc ))
cdf.est<- svycdf(~eqIncome,des_Tyrol)
cdf.est[[1]](2000)
cdf.est<- svycdf(~eqIncome,des_eusilc)
cdf.est[[1]](20000)
cdf.est<- svycdf(~eqIncome,des_Tyrol)
cdf.est[[1]](20000)
str(cdf.est)
SE(cdf.est[[1]](20000))
eusilc$poor<-(eusilc$eqIncome<=20000)*1
eusilc$one<-rep(1,nrow(eusilc))
str(des_eusilc)
svydesign(ids = ~db040, weights = ~rb050, data = eusilc)
des_eusilc <- svydesign(ids = ~db040, weights = ~rb050, data = eusilc)
svyratio(~poor, one,des_eusilc )
svyratio(~poor, ~one,des_eusilc )
icdf_eqIncome$value
icdf_eqIncome <-icdf(~eqIncome, design=des_eusilc, 20000, ncom=nrow(eusilc), comp=TRUE)
icdf_eqIncome$value
SE_lin(icdf_eqIncome,des_eusilc )
svyratio(~poor, ~one,des_Tyrol )
des_Tyrol<-subset(des_eusilc, db040=="Tyrol")
svyratio(~poor, ~one, des_Tyrol )
icdf_eqIncome <-icdf(~eqIncome, design=des_eusilc, 20000, ncom=nrow(eusilc), comp=TRUE)
icdf_eqIncome$value
SE_lin(icdf_eqIncome,des_eusilc )
icdf_eqIncome <-icdf(~eqIncome, design=des_eusilc, 20000, ncom=nrow(eusilc), comp=TRUE)
SE_lin(icdf_eqIncome,des_eusilc )
icdf_eqIncome_Tyrol <-icdf1(~eqIncome, design=des_Tyrol, 20000, ncom=nrow(eusilc), comp=TRUE)
icdf_eqIncome_Tyrol$value
SE_lin(icdf_eqIncome_Tyrol,des_eusilc )
eusilc$poor_Tyrol<-(eusilc$eqIncome<=20000)&(eusilc$db040=="Tyrol")*1
eusilc$one_tyrol<- (eusilc$db040=="Tyrol")*1
des_eusilc <- svydesign(ids = ~db040, weights = ~rb050, data = eusilc)
svyratio(~poor_Tyrol, ~one_tyrol,des_Tyrol)
eusilc$poor_Tyrol<-(eusilc$eqIncome<=20000)&(eusilc$db040=="Tyrol")*1
eusilc$one_tyrol<- (eusilc$db040=="Tyrol")*1
des_eusilc <- svydesign(ids = ~db040, weights = ~rb050, data = eusilc)
des_Tyrol<-subset(des_eusilc, db040=="Tyrol")
svyratio(~poor, ~one, des_Tyrol )
svyratio(~poor_Tyrol, ~one_tyrol,des_Tyrol)
svyratio(~poor_Tyrol, ~one_tyrol, des_eusilc)
SE_lin(icdf_eqIncome1,des_eusilc )
SE_lin(icdf_eqIncome1,des_eusilc )
icdf_eqIncome <-icdf(~eqIncome, design=des_eusilc, 20000, ncom=nrow(eusilc), comp=TRUE)
str(icdf_eqIncome)
icdf_eqIncome$value
icdf1_eqIncome <-icdf1(~eqIncome, design=des_eusilc, 20000, ncom=nrow(eusilc), comp=TRUE)
str(icdf1_eqIncome)
icdf1_eqIncome$value
SE_lin(icdf_eqIncome)
SE_lin(icdf_eqIncome,des_eusilc )
SE_lin(icdf1_eqIncome)
SE_lin(icdf1_eqIncome,des_eusilc)
des_Tyrol<-subset(des_eusilc, db040=="Tyrol")
icdf_eqIncome_Tyrol <-icdf(~eqIncome, design=des_Tyrol, 20000, ncom=nrow(eusilc), comp=TRUE)
str(icdf_eqIncome_Tyrol)
SE_lin(icdf_eqIncome_Tyrol, des_eusilc)
icdf1_eqIncome_Tyrol <-icdf1(~eqIncome, design=des_Tyrol, 20000, ncom=nrow(eusilc), comp=TRUE)
str(icdf1_eqIncome_Tyrol)
icdf1_eqIncome_Tyrol$value
SE_lin(icdf1_eqIncome_Tyrol, des_eusilc)
?svyby
svyby(~poor, by=~db040,denominator= ~one, design=des_eusilc,FUN=svyratio )
lixo<- svyby(~eqIncome,by= ~db040, design=des_eusilc, FUN=icdf, x=20000,ncom=nrow(eusilc),
comp=TRUE ,deff=FALSE, keep.var=FALSE )
str(lixo)
unlist(lixo$statistic.value)
SE_lin(lixo,des_eusilc)
unlist(SE_lin(lixo,des_eusilc))
data.frame(db040=lixo$db040, value=unlist(lixo$statistic.value), se=unlist(SE_lin(lixo,des_eusilc)))
svyby(~poor, by=~db040,denominator= ~one, design=des_eusilc,FUN=svyratio )
rownames(ses)[1:10]
library(vardpoor)
data(ses)
rownames(ses)[1:10]
rownames(eusilc)[1:10]
data(eusilc)
rownames(eusilc)[1:10]
lixo<-data.frame(x=1:10,y=11:20)
rownames(lixo)
library(convey)
complete <- function(x, ind.all) {
x.comp <- rep(0, length(ind.all))
names(x.comp) <- ind.all
x.comp[names(x)] <- x
x.comp
}
data(ses)
des_ses<- svydesign(id=~1, weights=~weights, data=ses,variables=~weights+sex+earningsHour+location)
library(survey)
des_ses<- svydesign(id=~1, weights=~weights, data=ses,variables=~weights+sex+earningsHour+location)
# subset the design
des_ses_AT1<- subset(des_ses, location=="AT1")
lixo<- svygpg1(~earningsHour, des_ses_AT1, ~sex, ncom = nrow(ses))
svygpg1 <- function(x, design, sex, ncom, comp=TRUE) {
wage <- terms.formula(x)[[2]]
df <- model.frame(design)
wage <- df[[as.character(wage)]]
w<- weights(design)
ind<-names(w)
# sex factor
mf <- model.frame(sex, design$variables, na.action = na.pass)
xx <- lapply(attr(terms(sex), "variables")[-1], function(tt) model.matrix(eval(bquote(~0 +
.(tt))), mf))
cols <- sapply(xx, NCOL)
sex <- matrix(nrow = NROW(xx[[1]]), ncol = sum(cols))
scols <- c(0, cumsum(cols))
for (i in 1:length(xx)) {
sex[, scols[i] + 1:cols[i]] <- xx[[i]]
}
colnames(sex) <- do.call("c", lapply(xx, colnames))
sex <- as.matrix(sex)
col_female <- grep("female", colnames(sex))
col_male <- setdiff(1:2, col_female)
# cria linearization objects of totals
INDM <-list(value = sum(sex[, col_male]*w), lin=sex[, col_male])
INDF <- list(value = sum(sex[, col_female]*w), lin=sex[, col_female])
TM<- list(value = sum(wage*sex[, col_male]*w), lin=wage*sex[, col_male])
TF<- list(value = sum(wage*sex[, col_female]*w), lin=wage*sex[, col_female])
list_all_tot <-list(INDM=INDM,INDF=INDF,TM=TM,TF=TF)
IGPG<-contrastinf(quote((TM/INDM-TF/INDF)/(TM/INDM)),list_all_tot)
infun<-IGPG$lin
names(infun) <- ind
infuncomp <- complete(infun, ncom)
if (comp) lin <- infuncomp else lin <- infun
list(value = IGPG$value, lin = lin)
}
des_ses_AT1<- subset(des_ses, location=="AT1")
lixo<- svygpg1(~earningsHour, des_ses_AT1, ~sex, ncom = nrow(ses))
lixo$value
SE_lin(lixo,des_ses)
gpgdom <- svyby(~earningsHour, by=~location, design = des_ses, FUN=svygpg1,
sex=~sex, ncom = rownames(ses), comp=TRUE, deff=FALSE, keep.var=FALSE)
lixo<- svygpg1(~earningsHour, des_ses_AT1, ~sex, ncom = nrow(ses))
lixo<- svygpg1(~earningsHour, des_ses_AT1, ~sex, ncom = nrow(ses))
lixo$value
SE_lin(lixo,des_ses)
str(lixo)
NROW(ses)
complete
library(devtools)
install_github("djalmapessoa/convey")
library(survey)
install_github("djalmapessoa/convey")
complete1 <- function(x, ind.all) {
x.comp <- rep(0, length(ind.all))
names(x.comp) <- ind.all
x.comp[names(x)] <- x
x.comp
}
library(survey)
library(vardpoor)
library(convey)
data(ses)
des_ses<- svydesign(id=~1, weights=~weights, data=ses,variables=~weights+sex+earningsHour+location)
ses_gpg<- svygpg(~earningsHour,des_ses, ~sex)
ses_gpg$value
SE_lin(ses_gpg,des_ses)
ses_gpg1<- svygpg1(~earningsHour, des_ses, ~sex, ncom = nrow(ses))
svygpg1 <- function(x, design, sex, ncom, comp=TRUE) {
wage <- terms.formula(x)[[2]]
df <- model.frame(design)
wage <- df[[as.character(wage)]]
w<- weights(design)
ind<-names(w)
# sex factor
mf <- model.frame(sex, design$variables, na.action = na.pass)
xx <- lapply(attr(terms(sex), "variables")[-1], function(tt) model.matrix(eval(bquote(~0 +
.(tt))), mf))
cols <- sapply(xx, NCOL)
sex <- matrix(nrow = NROW(xx[[1]]), ncol = sum(cols))
scols <- c(0, cumsum(cols))
for (i in 1:length(xx)) {
sex[, scols[i] + 1:cols[i]] <- xx[[i]]
}
colnames(sex) <- do.call("c", lapply(xx, colnames))
sex <- as.matrix(sex)
col_female <- grep("female", colnames(sex))
col_male <- setdiff(1:2, col_female)
# cria linearization objects of totals
INDM <-list(value = sum(sex[, col_male]*w), lin=sex[, col_male])
INDF <- list(value = sum(sex[, col_female]*w), lin=sex[, col_female])
TM<- list(value = sum(wage*sex[, col_male]*w), lin=wage*sex[, col_male])
TF<- list(value = sum(wage*sex[, col_female]*w), lin=wage*sex[, col_female])
list_all_tot <-list(INDM=INDM,INDF=INDF,TM=TM,TF=TF)
IGPG<-contrastinf(quote((TM/INDM-TF/INDF)/(TM/INDM)),list_all_tot)
infun<-IGPG$lin
names(infun) <- ind
infuncomp <- complete1(infun, ncom)
if (comp) lin <- infuncomp else lin <- infun
list(value = IGPG$value, lin = lin)
}
ses_gpg1<- svygpg1(~earningsHour, des_ses, ~sex, ncom = nrow(ses))
ses_gpg1$value
SE_lin(ses_gpg1,des_ses)
debugonce(svygpg1)
ses_gpg1<- svygpg1(~earningsHour, des_ses, ~sex, ncom = nrow(ses))
ses_gpg1<- svygpg1(~earningsHour, des_ses, ~sex, ncom =rownames(ses), comp=FALSE)
ses_gpg1$value
SE_lin(ses_gpg1,des_ses)
ses_gpg$value
SE_lin(ses_gpg,des_ses)
lixo<- svygpg1(~earningsHour, des_ses_AT1, ~sex, ncom = rownames(ses))
des_ses_AT1<- subset(des_ses, location=="AT1")
lixo<- svygpg1(~earningsHour, des_ses_AT1, ~sex, ncom = rownames(ses))
lixo$value
SE_lin(lixo,des_ses)
gpgdom <- svyby(~earningsHour, by=~location, design = des_ses, FUN=svygpg1,
sex=~sex, ncom = rownames(ses), comp=TRUE, deff=FALSE, keep.var=FALSE)
install_github("djalmapessoa/convey")
library(survey)
library(vardpoor)
library(convey)
data(ses)
des_ses<- svydesign(id=~1, weights=~weights, data=ses,variables=~weights+sex+earningsHour+location)
ses_gpg<- svygpg(~earningsHour,des_ses, ~sex)
ses_gpg<- svygpg(~earningsHour,des_ses, ~sex)
des_ses<- svydesign(id=~1, weights=~weights, data=ses,variables=~weights+sex+earningsHour+location)
ses_gpg<- svygpg(~earningsHour,des_ses, ~sex)
library(survey)
ses_gpg<- svygpg(~earningsHour,des_ses, ~sex)
ses_gpg1<- svygpg1(~earningsHour, des_ses, ~sex, ncom =rownames(ses), comp=FALSE)
svygpg1 <- function(x, design, sex, ncom, comp=TRUE) {
wage <- terms.formula(x)[[2]]
df <- model.frame(design)
wage <- df[[as.character(wage)]]
w<- weights(design)
ind<-names(w)
# sex factor
mf <- model.frame(sex, design$variables, na.action = na.pass)
xx <- lapply(attr(terms(sex), "variables")[-1], function(tt) model.matrix(eval(bquote(~0 +
.(tt))), mf))
cols <- sapply(xx, NCOL)
sex <- matrix(nrow = NROW(xx[[1]]), ncol = sum(cols))
scols <- c(0, cumsum(cols))
for (i in 1:length(xx)) {
sex[, scols[i] + 1:cols[i]] <- xx[[i]]
}
colnames(sex) <- do.call("c", lapply(xx, colnames))
sex <- as.matrix(sex)
col_female <- grep("female", colnames(sex))
col_male <- setdiff(1:2, col_female)
# cria linearization objects of totals
INDM <-list(value = sum(sex[, col_male]*w), lin=sex[, col_male])
INDF <- list(value = sum(sex[, col_female]*w), lin=sex[, col_female])
TM<- list(value = sum(wage*sex[, col_male]*w), lin=wage*sex[, col_male])
TF<- list(value = sum(wage*sex[, col_female]*w), lin=wage*sex[, col_female])
list_all_tot <-list(INDM=INDM,INDF=INDF,TM=TM,TF=TF)
IGPG<-contrastinf(quote((TM/INDM-TF/INDF)/(TM/INDM)),list_all_tot)
infun<-IGPG$lin
names(infun) <- ind
infuncomp <- complete1(infun, ncom)
if (comp) lin <- infuncomp else lin <- infun
list(value = IGPG$value, lin = lin)
}
ses_gpg1<- svygpg1(~earningsHour, des_ses, ~sex, ncom =rownames(ses), comp=FALSE)
complete1 <- function(x, ind.all) {
x.comp <- rep(0, length(ind.all))
names(x.comp) <- ind.all
x.comp[names(x)] <- x
x.comp
}
ses_gpg1<- svygpg1(~earningsHour, des_ses, ~sex, ncom =rownames(ses), comp=FALSE)
ses_gpg1$value
SE_lin(ses_gpg1,des_ses)
library(devtools)
install_github("djalmapessoa/convey")
ses_gpg<- svygpg(~earningsHour,des_ses, ~sex)
des_ses_AT1<- subset(des_ses, location=="AT1")
lixo<- svygpg1(~earningsHour, des_ses_AT1, ~sex, ncom = nrow(ses))
lixo$value
SE_lin(lixo,des_ses)
lixo<- svygpg1(~earningsHour, des_ses_AT1, ~sex, ncom = rownames(ses))
lixo$value
SE_lin(lixo,des_ses)
gpgdom <- svyby(~earningsHour, by=~location, design = des_ses, FUN=svygpg1,
sex=~sex, ncom = rownames(ses), comp=TRUE, deff=FALSE, keep.var=FALSE)
str(lixo$lin)
install_github("djalmapessoa/convey")
library(convey)
ses_gpg<- svygpg(~earningsHour,des_ses, ~sex)
ses_gpg$value
SE_lin(ses_gpg,des_ses)
gpgdom <- svyby(~earningsHour, by=~location, design = des_ses, FUN=svygpg1,
sex=~sex, ncom = rownames(ses), comp=TRUE, deff=FALSE, keep.var=FALSE)
des_ses_AT2<- subset(des_ses, location=="AT2")
lixo<- svygpg1(~earningsHour, des_ses_AT2, ~sex, ncom = rownames(ses))
lixo$value
str(lixo$lin)
SE_lin(lixo,des_ses)
library(convey)
library(vardpoor)
data(eusilc)
dati=data.frame(1:nrow(eusilc),eusilc)
colnames(dati)[1] <- "IDd"
library(survey)
# create a design object
des_eusilc <- svydesign(ids=~db040, weights=~rb050, data=eusilc)
fun_arptd<- svyby(~eqIncome, by= ~db040, design=des_eusilc, FUN=svyarpt, order = .50, percent =.6,
h= htot,ncom=nrow(des_eusilc$variables), comp=TRUE, deff=FALSE, keep.var=FALSE, keep.names = TRUE)
htot <- h_fun(eusilc$eqIncome, eusilc$rb050)
fun_arptd<- svyby(~eqIncome, by= ~db040, design=des_eusilc, FUN=svyarpt, order = .50, percent =.6,
h= htot,ncom=nrow(des_eusilc$variables), comp=TRUE, deff=FALSE, keep.var=FALSE, keep.names = TRUE)
library(devtools)
install_github("djalmapessoa/convey")
fun_arptd<- svyby(~eqIncome, by= ~db040, design=des_eusilc, FUN=svyarpt, order = .50, percent =.6,
h= htot,ncom=rownames(eusilc), comp=TRUE, deff=FALSE, keep.var=FALSE, keep.names = TRUE)
source('~/GitHub/convey/tests.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/convey/tests.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/convey/tests.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/convey/tests.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/convey/tests.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/convey/tests.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/convey/tests.R', encoding = 'UTF-8', echo=TRUE)
source('~/GitHub/convey/tests.R', encoding = 'UTF-8', echo=TRUE)
warnings()
source('C:/Users/owner/Desktop/rascunhos convey/new_funs.R', echo=TRUE)
source('C:/Users/owner/Desktop/rascunhos convey/new_funs.R', echo=TRUE)
icdf1_eqIncome <-icdf1(~eqIncome, design=des_eusilc, 20000, ncom=rownames(eusilc), comp=TRUE)
debugonce(icdf1)
icdf1_eqIncome <-icdf1(~eqIncome, design=des_eusilc, 20000, ncom=rownames(eusilc), comp=TRUE)
str(df)
str(df)
source('C:/Users/owner/Desktop/rascunhos convey/new_funs.R', echo=TRUE)
debugonce(icdf1)
icdf1_eqIncome <-icdf1(~eqIncome, design=des_eusilc, 20000, ncom=rownames(eusilc), comp=TRUE)
str(poor)
summary(incvar)
str(num_obj)
!is.null(invec)
is.null(invec)
library(survey)
library(vardpoor)
library(convey)
data(ses)
des_ses<- svydesign(id=~1, weights=~weights, data=ses,variables=~weights+sex+earningsHour+location)
ses_gpg<- svygpg(~earningsHour,des_ses, ~sex)
ses_gpg$value
SE_lin(ses_gpg,des_ses)
ses_gpg1<- svygpg1(~earningsHour, des_ses, ~sex, ncom =rownames(ses), comp=FALSE)
ses_gpg1$value
SE_lin(ses_gpg1,des_ses)
svygpg1 <- function(x, design, sex, ncom, comp=TRUE) {
wage <- terms.formula(x)[[2]]
df <- model.frame(design)
wage <- df[[as.character(wage)]]
w<- weights(design)
ind<-names(w)
# sex factor
mf <- model.frame(sex, design$variables, na.action = na.pass)
xx <- lapply(attr(terms(sex), "variables")[-1], function(tt) model.matrix(eval(bquote(~0 +
.(tt))), mf))
cols <- sapply(xx, NCOL)
sex <- matrix(nrow = NROW(xx[[1]]), ncol = sum(cols))
scols <- c(0, cumsum(cols))
for (i in 1:length(xx)) {
sex[, scols[i] + 1:cols[i]] <- xx[[i]]
}
colnames(sex) <- do.call("c", lapply(xx, colnames))
sex <- as.matrix(sex)
col_female <- grep("female", colnames(sex))
col_male <- setdiff(1:2, col_female)
# cria linearization objects of totals
INDM <-list(value = sum(sex[, col_male]*w), lin=sex[, col_male])
INDF <- list(value = sum(sex[, col_female]*w), lin=sex[, col_female])
TM<- list(value = sum(wage*sex[, col_male]*w), lin=wage*sex[, col_male])
TF<- list(value = sum(wage*sex[, col_female]*w), lin=wage*sex[, col_female])
list_all_tot <-list(INDM=INDM,INDF=INDF,TM=TM,TF=TF)
IGPG<-contrastinf(quote((TM/INDM-TF/INDF)/(TM/INDM)),list_all_tot)
infun<-IGPG$lin
names(infun) <- ind
infuncomp <- complete1(infun, ncom)
if (comp) lin <- infuncomp else lin <- infun
list(value = IGPG$value, lin = lin)
}
ses_gpg1<- svygpg1(~earningsHour, des_ses, ~sex, ncom =rownames(ses), comp=FALSE)
ses_gpg1$value
SE_lin(ses_gpg1,des_ses)
svygpg1 <- function(x, design, sex, ncom, comp=TRUE) {
wage <- terms.formula(x)[[2]]
df <- model.frame(design)
wage <- df[[as.character(wage)]]
w<- weights(design)
ind<-names(w)
# sex factor
mf <- model.frame(sex, design$variables, na.action = na.pass)
xx <- lapply(attr(terms(sex), "variables")[-1], function(tt) model.matrix(eval(bquote(~0 +
.(tt))), mf))
cols <- sapply(xx, NCOL)
sex <- matrix(nrow = NROW(xx[[1]]), ncol = sum(cols))
scols <- c(0, cumsum(cols))
for (i in 1:length(xx)) {
sex[, scols[i] + 1:cols[i]] <- xx[[i]]
}
colnames(sex) <- do.call("c", lapply(xx, colnames))
sex <- as.matrix(sex)
col_female <- grep("female", colnames(sex))
col_male <- setdiff(1:2, col_female)
# cria linearization objects of totals
INDM <-list(value = sum(sex[, col_male]*w), lin=sex[, col_male])
INDF <- list(value = sum(sex[, col_female]*w), lin=sex[, col_female])
TM<- list(value = sum(wage*sex[, col_male]*w), lin=wage*sex[, col_male])
TF<- list(value = sum(wage*sex[, col_female]*w), lin=wage*sex[, col_female])
list_all_tot <-list(INDM=INDM,INDF=INDF,TM=TM,TF=TF)
IGPG<-contrastinf(quote((TM/INDM-TF/INDF)/(TM/INDM)),list_all_tot)
infun<-IGPG$lin
names(infun) <- ind
infuncomp <- complete(infun, ncom)
if (comp) lin <- infuncomp else lin <- infun
list(value = IGPG$value, lin = lin)
}
ses_gpg1<- svygpg1(~earningsHour, des_ses, ~sex, ncom =rownames(ses), comp=FALSE)
ses_gpg1$value
SE_lin(ses_gpg1,des_ses)
des_ses_AT2<- subset(des_ses, location=="AT2")
lixo<- svygpg1(~earningsHour, des_ses_AT2, ~sex, ncom = rownames(ses))
lixo$value
str(lixo$lin)
SE_lin(lixo,des_ses)
gpgdom <- svyby(~earningsHour, by=~location, design = des_ses, FUN=svygpg1,
sex=~sex, ncom = rownames(ses), comp=TRUE, deff=FALSE, keep.var=FALSE)
svygpg1_AT1<- svygpg1(~earningsHour, subset(des_ses, location=="AT1"), ~sex, ncom = rownames(ses))
svygpg1_AT2<- svygpg1(~earningsHour, subset(des_ses, location=="AT2"), ~sex, ncom = rownames(ses))
svygpg1_AT3<- svygpg1(~earningsHour, subset(des_ses, location=="AT3"), ~sex, ncom = rownames(ses))
str(svygpg1_AT1)
str(svygpg1_AT2)
str(svygpg1_AT3)
