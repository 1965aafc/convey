w <- weights(design)
ind <- names(w)
linqalpha <- iqalpha1(formula = formula, design = design, alpha = order,
comp = TRUE, compinc = FALSE)
rval<-percent*linqalpha[1]
lin<- percent*attr(linqalpha,"lin")
full_design <- attr( design , "full_design" )
ncom<-names(weights(full_design))
#names(lin) <- ind
#if (comp) lin <- complete(lin, ncom)
variance <- ( SE_lin2( lin , full_design ) )^2
class(rval) <- "cvystat"
attr( rval , "var" ) <- variance
attr( rval , "statistic" ) <- "arpt"
attr(rval, "lin")<- lin
rval
}
svyarpr1 <- function(formula, design, order = 0.5, percent = 0.6, comp=TRUE,...){
if( is.null( attr( design , "full_design" ) ) ) stop( "you must run the ?convey_prep function on your linearized survey design object immediately after creating it with the svydesign() function." )
# domain
inc <- terms.formula(formula)[[2]]
df<- model.frame(design)
incvar <-df[[as.character(inc)]]
w <- weights(design)
N<- sum(w)
ind <- names(w)
# full
full_design <- attr( design , "full_design" )
df_full <- model.frame(full_design)
incvec <- df_full[[as.character(inc)]]
wf <- weights(full_design)
ncom <- names(wf)
htot <- h_fun(incvec, wf)
# use full design
ARPT <- svyarpt1(formula=formula, design = full_design, order = order,
percent = percent, comp=TRUE, attr_des = FALSE )
arptv <-ARPT[1]
arptlin<- attr(ARPT, "lin")
# value of arpr and first term of lin
arpr1 <- icdf1(formula=formula, design=design, x=arptv, ncom=ncom, comp = TRUE)
rval <- arpr1[1]
arpr1lin <- attr(arpr1, "lin")
# use h for the whole sample
Fprime <- densfun(formula = formula, design = design, arptv,
htot = htot, fun = "F")
arprlin <- arpr1lin + Fprime* arptlin
#names(lin) <- ind
#if(comp)lin<- complete(lin, ncom)
variance <- ( SE_lin2( arprlin , full_design ) )^2
class(rval) <- "cvystat"
attr( rval , "var" ) <- variance
attr( rval , "statistic" ) <- "arpr"
attr(rval, "lin")<- arprlin
rval
}
fun_arprw_new <-svyarpr1(~eqIncome, des_eusilc, .5, .6)
densfun
svyarpr1 <- function(formula, design, order = 0.5, percent = 0.6, comp=TRUE,...){
if( is.null( attr( design , "full_design" ) ) ) stop( "you must run the ?convey_prep function on your linearized survey design object immediately after creating it with the svydesign() function." )
# domain
inc <- terms.formula(formula)[[2]]
df<- model.frame(design)
incvar <-df[[as.character(inc)]]
w <- weights(design)
N<- sum(w)
ind <- names(w)
# full
full_design <- attr( design , "full_design" )
df_full <- model.frame(full_design)
incvec <- df_full[[as.character(inc)]]
wf <- weights(full_design)
ncom <- names(wf)
htot <- h_fun(incvec, wf)
# use full design
q_alpha <- survey::svyquantile(x = formula, design = full_design,
quantiles = order, method = "constant")
q_alpha <- as.vector(q_alpha)
arptv <-percent* q_alpha
Fprimef<-Fprime <- densfun (formula = formula, design = full_design, arptv,
htot = htot, fun = "F")
arptlin <- -percent*(1/(N * Fprime)) * ((incvec <= q_alpha) - alpha)
#   ARPT <- svyarpt1(formula=formula, design = full_design, order = order,
#     percent = percent, comp=TRUE, attr_des = FALSE )
#
#   arptlin<- attr(ARPT, "lin")
# value of arpr and first term of lin
arpr1 <- icdf1(formula=formula, design=design, x=arptv, ncom=ncom, comp = TRUE)
rval <- arpr1[1]
arpr1lin <- attr(arpr1, "lin")
# use h for the whole sample
Fprime <- densfun(formula = formula, design = design, arptv,
htot = htot, fun = "F")
arprlin <- arpr1lin + Fprime* arptlin
#names(lin) <- ind
#if(comp)lin<- complete(lin, ncom)
variance <- ( SE_lin2( arprlin , full_design ) )^2
class(rval) <- "cvystat"
attr( rval , "var" ) <- variance
attr( rval , "statistic" ) <- "arpr"
attr(rval, "lin")<- arprlin
rval
}
fun_arprw_new <-svyarpr1(~eqIncome, des_eusilc, .5, .6)
svyarpr1 <- function(formula, design, order = 0.5, percent = 0.6, comp=TRUE,...){
if( is.null( attr( design , "full_design" ) ) ) stop( "you must run the ?convey_prep function on your linearized survey design object immediately after creating it with the svydesign() function." )
# domain
inc <- terms.formula(formula)[[2]]
df<- model.frame(design)
incvar <-df[[as.character(inc)]]
w <- weights(design)
N<- sum(w)
ind <- names(w)
# full
full_design <- attr( design , "full_design" )
df_full <- model.frame(full_design)
incvec <- df_full[[as.character(inc)]]
wf <- weights(full_design)
ncom <- names(wf)
htot <- h_fun(incvec, wf)
# use full design
q_alpha <- survey::svyquantile(x = formula, design = full_design,
quantiles = order, method = "constant")
q_alpha <- as.vector(q_alpha)
arptv <-percent* q_alpha
Fprimef <- densfun (formula = formula, design = full_design, arptv,
htot = htot, fun = "F")
arptlin <- -percent*(1/(N * Fprime)) * ((incvec <= q_alpha) - order)
#   ARPT <- svyarpt1(formula=formula, design = full_design, order = order,
#     percent = percent, comp=TRUE, attr_des = FALSE )
#
#   arptlin<- attr(ARPT, "lin")
# value of arpr and first term of lin
arpr1 <- icdf1(formula=formula, design=design, x=arptv, ncom=ncom, comp = TRUE)
rval <- arpr1[1]
arpr1lin <- attr(arpr1, "lin")
# use h for the whole sample
Fprime <- densfun(formula = formula, design = design, arptv,
htot = htot, fun = "F")
arprlin <- arpr1lin + Fprime* arptlin
#names(lin) <- ind
#if(comp)lin<- complete(lin, ncom)
variance <- ( SE_lin2( arprlin , full_design ) )^2
class(rval) <- "cvystat"
attr( rval , "var" ) <- variance
attr( rval , "statistic" ) <- "arpr"
attr(rval, "lin")<- arprlin
rval
}
fun_arprw_new <-svyarpr1(~eqIncome, des_eusilc, .5, .6)
svyarpr1 <- function(formula, design, order = 0.5, percent = 0.6, comp=TRUE,...){
if( is.null( attr( design , "full_design" ) ) ) stop( "you must run the ?convey_prep function on your linearized survey design object immediately after creating it with the svydesign() function." )
# domain
inc <- terms.formula(formula)[[2]]
df<- model.frame(design)
incvar <-df[[as.character(inc)]]
w <- weights(design)
N<- sum(w)
ind <- names(w)
# full
full_design <- attr( design , "full_design" )
df_full <- model.frame(full_design)
incvec <- df_full[[as.character(inc)]]
wf <- weights(full_design)
ncom <- names(wf)
htot <- h_fun(incvec, wf)
# use full design
q_alpha <- survey::svyquantile(x = formula, design = full_design,
quantiles = order, method = "constant")
q_alpha <- as.vector(q_alpha)
arptv <-percent* q_alpha
Fprimef <- densfun (formula = formula, design = full_design, arptv,
htot = htot, fun = "F")
arptlin <- -percent*(1/(N * Fprimef)) * ((incvec <= q_alpha) - order)
#   ARPT <- svyarpt1(formula=formula, design = full_design, order = order,
#     percent = percent, comp=TRUE, attr_des = FALSE )
#
#   arptlin<- attr(ARPT, "lin")
# value of arpr and first term of lin
arpr1 <- icdf1(formula=formula, design=design, x=arptv, ncom=ncom, comp = TRUE)
rval <- arpr1[1]
arpr1lin <- attr(arpr1, "lin")
# use h for the whole sample
Fprime <- densfun(formula = formula, design = design, arptv,
htot = htot, fun = "F")
arprlin <- arpr1lin + Fprime* arptlin
#names(lin) <- ind
#if(comp)lin<- complete(lin, ncom)
variance <- ( SE_lin2( arprlin , full_design ) )^2
class(rval) <- "cvystat"
attr( rval , "var" ) <- variance
attr( rval , "statistic" ) <- "arpr"
attr(rval, "lin")<- arprlin
rval
}
fun_arprw_new <-svyarpr1(~eqIncome, des_eusilc, .5, .6)
fun_arprw_new
fun_arprd_new<- svyby(~eqIncome, by= ~db040, design=des_eusilc, FUN=svyarpr1, order = .50, percent =.6, deff=FALSE, keep.var=FALSE)
fun_arprd_new
svygpg1 <- function(x, design, sex, ncom, comp=TRUE,...) {
if( is.null( attr( design , "full_design" ) ) ) stop( "you must run the ?convey_prep function on your linearized survey design object immediately after creating it with the svydesign() function." )
wage <- terms.formula(x)[[2]]
df <- model.frame(design)
wage <- df[[as.character(wage)]]
w<- weights(design)
ind<-names(w)
full_design <- attr( design , "full_design" )
ncom<-names(weights(full_design))
# sex factor
mf <- model.frame(sex, design$variables, na.action = na.pass)
xx <- lapply(attr(terms(sex), "variables")[-1], function(tt) model.matrix(eval(bquote(~0 +
.(tt))), mf))
cols <- sapply(xx, NCOL)
sex <- matrix(nrow = NROW(xx[[1]]), ncol = sum(cols))
scols <- c(0, cumsum(cols))
for (i in 1:length(xx)) {
sex[, scols[i] + 1:cols[i]] <- xx[[i]]
}
colnames(sex) <- do.call("c", lapply(xx, colnames))
sex <- as.matrix(sex)
col_female <- grep("female", colnames(sex))
col_male <- setdiff(1:2, col_female)
# create linearization objects of totals
INDM <-list(value = sum(sex[, col_male]*w), lin=sex[, col_male])
INDF <- list(value = sum(sex[, col_female]*w), lin=sex[, col_female])
TM<- list(value = sum(wage*sex[, col_male]*w), lin=wage*sex[, col_male])
TF<- list(value = sum(wage*sex[, col_female]*w), lin=wage*sex[, col_female])
list_all_tot <-list(INDM=INDM,INDF=INDF,TM=TM,TF=TF)
lapply(list_all_tot, function(t){
names(t$lin)<-ind
complete(t,ncom)
})
IGPG<-contrastinf(quote((TM/INDM-TF/INDF)/(TM/INDM)),list_all_tot)
infun<-IGPG$lin
names(infun) <- ind
infuncomp <- complete(infun, ncom)
# if (comp) lin <- infuncomp else lin <- infun
rval <- IGPG$value
variance <- ( SE_lin2( lin , full_design ) )^2
class(rval) <- "cvystat"
attr( rval , "var" ) <- variance
attr( rval , "statistic" ) <- "gpg"
rval
}
data(ses)
des_ses<- svydesign(id=~1, weights=~weights, data=ses,variables=~weights+sex+earningsHour+location)
des_ses <- convey_prep( des_ses )
debugonce(svygpg1)
ses_gpg <- svygpg1(~earningsHour, des_ses, ~sex, ncom =rownames(ses), comp=FALSE)
svygpg1 <- function(x, design, sex, ncom, comp=TRUE,...) {
if( is.null( attr( design , "full_design" ) ) ) stop( "you must run the ?convey_prep function on your linearized survey design object immediately after creating it with the svydesign() function." )
wage <- terms.formula(x)[[2]]
df <- model.frame(design)
wage <- df[[as.character(wage)]]
w<- weights(design)
ind<-names(w)
full_design <- attr( design , "full_design" )
ncom<-names(weights(full_design))
# sex factor
mf <- model.frame(sex, design$variables, na.action = na.pass)
xx <- lapply(attr(terms(sex), "variables")[-1], function(tt) model.matrix(eval(bquote(~0 +
.(tt))), mf))
cols <- sapply(xx, NCOL)
sex <- matrix(nrow = NROW(xx[[1]]), ncol = sum(cols))
scols <- c(0, cumsum(cols))
for (i in 1:length(xx)) {
sex[, scols[i] + 1:cols[i]] <- xx[[i]]
}
colnames(sex) <- do.call("c", lapply(xx, colnames))
sex <- as.matrix(sex)
col_female <- grep("female", colnames(sex))
col_male <- setdiff(1:2, col_female)
# create linearization objects of totals
INDM <-list(value = sum(sex[, col_male]*w), lin=sex[, col_male])
INDF <- list(value = sum(sex[, col_female]*w), lin=sex[, col_female])
TM<- list(value = sum(wage*sex[, col_male]*w), lin=wage*sex[, col_male])
TF<- list(value = sum(wage*sex[, col_female]*w), lin=wage*sex[, col_female])
list_all_tot <-list(INDM=INDM,INDF=INDF,TM=TM,TF=TF)
list_all_totc<-lapply(list_all_tot, function(t){
names(t$lin)<-ind
complete(t,ncom)
})
IGPG<-contrastinf(quote((TM/INDM-TF/INDF)/(TM/INDM)),list_all_totc)
infun<-IGPG$lin
names(infun) <- ind
infuncomp <- complete(infun, ncom)
# if (comp) lin <- infuncomp else lin <- infun
rval <- IGPG$value
variance <- ( SE_lin2( lin , full_design ) )^2
class(rval) <- "cvystat"
attr( rval , "var" ) <- variance
attr( rval , "statistic" ) <- "gpg"
rval
}
debugonce(svygpg1)
ses_gpg <- svygpg1(~earningsHour, des_ses, ~sex, ncom =rownames(ses), comp=FALSE)
svygpg1 <- function(x, design, sex, comp=TRUE,...) {
if( is.null( attr( design , "full_design" ) ) ) stop( "you must run the ?convey_prep function on your linearized survey design object immediately after creating it with the svydesign() function." )
wage <- terms.formula(x)[[2]]
df <- model.frame(design)
wage <- df[[as.character(wage)]]
w<- weights(design)
ind<-names(w)
full_design <- attr( design , "full_design" )
ncom<-names(weights(full_design))
# sex factor
mf <- model.frame(sex, design$variables, na.action = na.pass)
xx <- lapply(attr(terms(sex), "variables")[-1], function(tt) model.matrix(eval(bquote(~0 +
.(tt))), mf))
cols <- sapply(xx, NCOL)
sex <- matrix(nrow = NROW(xx[[1]]), ncol = sum(cols))
scols <- c(0, cumsum(cols))
for (i in 1:length(xx)) {
sex[, scols[i] + 1:cols[i]] <- xx[[i]]
}
colnames(sex) <- do.call("c", lapply(xx, colnames))
sex <- as.matrix(sex)
col_female <- grep("female", colnames(sex))
col_male <- setdiff(1:2, col_female)
# create linearization objects of totals
INDM <-list(value = sum(sex[, col_male]*w), lin=sex[, col_male])
INDF <- list(value = sum(sex[, col_female]*w), lin=sex[, col_female])
TM<- list(value = sum(wage*sex[, col_male]*w), lin=wage*sex[, col_male])
TF<- list(value = sum(wage*sex[, col_female]*w), lin=wage*sex[, col_female])
list_all_tot <-list(INDM=INDM,INDF=INDF,TM=TM,TF=TF)
list_all_totc<-lapply(list_all_tot, function(t){
names(t$lin)<-ind
complete(t,ncom)
})
IGPG<-contrastinf(quote((TM/INDM-TF/INDF)/(TM/INDM)),list_all_totc)
infun<-IGPG$lin
names(infun) <- ind
infuncomp <- complete(infun, ncom)
# if (comp) lin <- infuncomp else lin <- infun
rval <- IGPG$value
variance <- ( SE_lin2( lin , full_design ) )^2
class(rval) <- "cvystat"
attr( rval , "var" ) <- variance
attr( rval , "statistic" ) <- "gpg"
rval
}
debugonce(svygpg1)
ses_gpg <- svygpg1(~earningsHour, des_ses, ~sex, ncom =rownames(ses), comp=FALSE)
str(list_all_totc)
des_eusilc <- convey_prep( des_eusilc )
library(convey)
des_eusilc <- convey_prep( des_eusilc )
library(vardpoor)
data(eusilc)
des_eusilc <- svydesign(ids=~db040, weights=~rb050, data=eusilc)
library(survey)
des_eusilc <- svydesign(ids=~db040, weights=~rb050, data=eusilc)
des_eusilc <- convey_prep( des_eusilc )
svyarpr1 <- function(formula, design, order = 0.5, percent = 0.6, comp=TRUE,...){
if( is.null( attr( design , "full_design" ) ) ) stop( "you must run the ?convey_prep function on your linearized survey design object immediately after creating it with the svydesign() function." )
# if the class of the full_design attribute is just a TRUE, then the design is already the full design.
# otherwise, pull the full_design from that attribute.
if( class( attr( design , "full_design" ) ) == 'logical' ) full_design <- design else full_design <- attr( design , "full_design" )
# domain
inc <- terms.formula(formula)[[2]]
df<- model.frame(design)
incvar <-df[[as.character(inc)]]
w <- weights(design)
N<- sum(w)
ind <- names(w)
# full sample
full_design <- attr( design , "full_design" )
df_full <- model.frame(full_design)
incvec <- df_full[[as.character(inc)]]
wf <- weights(full_design)
ncom <- names(wf)
htot <- h_fun(incvec, wf)
ARPT<- svyarpt1(formula = formula, full_design,order = 0.5, percent = 0.6)
q_alpha <- survey::svyquantile(x = formula, design = full_design,
quantiles = order, method = "constant")
q_alpha <- as.vector(q_alpha)
arptv <-percent* q_alpha
Fprimef <- densfun (formula = formula, design = full_design, arptv,
htot = htot, fun = "F")
arptlin <- -percent*(1/(N * Fprimef)) * ((incvec <= q_alpha) - order)
# value of arpr and first term of lin
arpr1 <- icdf1(formula=formula, design=design, x=arptv, ncom=ncom, comp = TRUE)
rval <- arpr1[1]
arpr1lin <- attr(arpr1, "lin")
# use h for the whole sample
Fprime <- densfun(formula = formula, design = design, arptv,
htot = htot, fun = "F")
arprlin <- arpr1lin + Fprime* arptlin
#names(lin) <- ind
#if(comp)lin<- complete(lin, ncom)
variance <- ( SE_lin2( arprlin , full_design ) )^2
class(rval) <- "cvystat"
attr( rval , "var" ) <- variance
attr( rval , "statistic" ) <- "arpr"
attr(rval, "lin")<- arprlin
rval
}
fun_arprw_new <-svyarpr1(~eqIncome, des_eusilc, .5, .6)
icdf1 <- function(formula, design, x, compinc=FALSE,...) {
if( is.null( attr( design , "full_design" ) ) ) stop( "you must run the ?convey_prep function on your linearized survey design object immediately after creating it with the svydesign() function." )
inc <- terms.formula(formula)[[2]]
df <- model.frame(design)
incvar <- df[[as.character(inc)]]
w <- weights(design)
ind <- names(w)
poor <- (incvar <= x) * 1
names(poor) <- ind
one<- rep(1, length(w))
names(one) <- ind
full_design <- attr( design , "full_design" )
ncom<-names(weights(full_design))
df_full<-model.frame(full_design)
incvec <- df_full[[as.character(inc)]]
NUM <- list(value = sum(poor*w), lin = complete(poor,ncom))
DEN <- list(value = sum(one*w), lin = complete(one,ncom))
if(compinc){
NUM<- list(value = sum(poor*w),lin = (incvec<=x)*1)
DEN<- list(value = sum(w),lin = rep(1,length(incvec)) )
}
list_all <- list(NUM=NUM,DEN=DEN)
CDF <- contrastinf(quote(NUM/DEN),list_all)
rval<-CDF$value
lin <- CDF$lin
variance <- ( SE_lin2( lin , full_design ) )^2
class(rval) <- "cvystat"
attr(rval, "lin") <- lin
attr( rval , "var" ) <- variance
attr( rval , "statistic" ) <- "cdf"
rval
}
iqalpha1 <- function(formula, design, alpha, comp=TRUE, compinc=FALSE,
...) {
if( is.null( attr( design , "full_design" ) ) ) stop( "you must run the ?convey_prep function on your linearized survey design object immediately after creating it with the svydesign() function." )
inc <- terms.formula(formula)[[2]]
df <- model.frame(design)
incvar <- df[[as.character(inc)]]
w <- weights(design)
N<- sum(w)
ind <- names(w)
q_alpha <- survey::svyquantile(x = formula, design = design, quantiles = alpha, method = "constant")
q_alpha <- as.vector(q_alpha)
full_design <- attr( design , "full_design" )
ncom <- names(weights(full_design))
df_full<-model.frame(full_design)
incvec <- df_full[[as.character(inc)]]
htot <- h_fun(incvec, weights(full_design))
Fprime <- densfun(formula = formula, design = design, q_alpha,
htot = htot, fun = "F")
iq <- -(1/(N * Fprime)) * ((incvar <= q_alpha) - alpha)
rval<-q_alpha
if (compinc) {
iq <- -(1/(N * Fprime)) * ((incvec <= q_alpha) - alpha)
}
names(iq) <- ind
if (comp) iq <- complete(iq, ncom)
variance <- ( SE_lin2( iq , full_design ) )^2
class(rval) <- "cvystat"
attr(rval, "lin") <- iq
attr( rval , "var" ) <- variance
attr( rval , "statistic" ) <- "quantile"
rval
}
svyarpt1 <- function(formula, design, order = 0.5, percent = 0.6,
comp=TRUE, attr_des = TRUE,...) {
if( is.null( attr( design , "full_design" ) )) stop( "you must run the ?convey_prep function on your linearized survey design object immediately after creating it with the svydesign() function." )
w <- weights(design)
ind <- names(w)
linqalpha <- iqalpha1(formula = formula, design = design, alpha = order,
comp = TRUE, compinc = FALSE)
rval<-percent*linqalpha[1]
lin<- percent*attr(linqalpha,"lin")
full_design <- attr( design , "full_design" )
ncom<-names(weights(full_design))
#names(lin) <- ind
#if (comp) lin <- complete(lin, ncom)
variance <- ( SE_lin2( lin , full_design ) )^2
class(rval) <- "cvystat"
attr( rval , "var" ) <- variance
attr( rval , "statistic" ) <- "arpt"
attr(rval, "lin")<- lin
rval
}
isq1 <- function(formula, design, alpha, comp=TRUE, ...) {
if( is.null( attr( design , "full_design" ) ) ) stop( "you must run the ?convey_prep function on your linearized survey design object immediately after creating it with the svydesign() function." )
inc <- terms.formula(formula)[[2]]
df <- model.frame(design)
incvar <- df[[as.character(inc)]]
w <- weights(design)
ind <- names(w)
full_design <- attr( design , "full_design" )
ncom<- names(weights(full_design))
df_full <- model.frame(full_design)
incvec <- df_full[[as.character(inc)]]
h <- h_fun(incvec, weights(full_design))
QALPHA <- iqalpha1(formula = formula, design = design, alpha, comp=TRUE,
compinc=TRUE)
q_alpha <- QALPHA[1]
iq <- attr(QALPHA, "lin")
inc_inf <- (incvar <= q_alpha) * incvar
tot <- sum(inc_inf * w)
Fprime <- densfun(formula = formula, design = design, q_alpha, htot = h, fun = "S")
isqalpha <- incvec * ((incvec <= q_alpha)) + Fprime * iq
# names(isqalpha)<- ind
# if(comp)isqalpha<-complete(isqalpha, ncom)
rval <- tot
variance <- ( SE_lin2( isqalpha , full_design ) )^2
class(rval) <- "cvystat"
attr( rval , "var" ) <- variance
attr( rval , "statistic" ) <- "isq"
attr(rval, "lin")<- isqalpha
rval
}
fun_arprw_new <-svyarpr1(~eqIncome, des_eusilc, .5, .6)
