aa2$all_result[, c( "type", "db04", "value", "se")]
as.data.frame(aa2$all_result)-> res_vardpoor_se
View(res_vardpoor_se)
res_vardpoor_se<- res_vardpoor_se[,c("type","db040","value", "se")]
View(res_vardpoor_se)
test_arpt_dom<-svyby(~eqIncome, by=~db040, FUN=svyarpt, design = des_eusilc0, order=.5,
percent=.6, h=htot, ncom=nrow(dataset1), comp=TRUE, deff=FALSE, keep.var=FALSE)
library(survey)
test_arpt_dom<-svyby(~eqIncome, by=~db040, FUN=svyarpt, design = des_eusilc0, order=.5,
percent=.6, h=htot, ncom=nrow(dataset1), comp=TRUE, deff=FALSE, keep.var=FALSE)
dataset1<- eusilc[1:1000,]
des_eusilc0<- svydesign(id=~rb030, strata = ~db040, weights = ~rb050, data = dataset1, nest = TRUE)
htot <-convey:::h_fun(dataset1$eqIncome, dataset1$rb050)
test_arpt<-svyarpt(~eqIncome, des_eusilc0, .5, .6, h=htot, ncom=nrow(dataset1), comp=TRUE )
test_arpt_dom<-svyby(~eqIncome, by=~db040, FUN=svyarpt, design = des_eusilc0, order=.5,
percent=.6, h=htot, ncom=nrow(dataset1), comp=TRUE, deff=FALSE, keep.var=FALSE)
test_arpr_dom<-svyby(~eqIncome, by=~db040, FUN=svyarpr, design = des_eusilc0, order=.5,
percent=.6,  h=htot, ARPT=test_arpt, ncom=nrow(dataset1), comp=TRUE, deff=FALSE, keep.var=FALSE)
test_rmpg_dom<-svyby(~eqIncome, by=~db040, FUN=svyrmpg, design = des_eusilc0, order=.5,
percent=.6, h=htot, ncom=nrow(dataset1), comp=TRUE, ARPT=test_arpt, deff=FALSE, keep.var=FALSE)
test_qsr_dom<-svyby(~eqIncome, by=~db040, FUN=svyqsr, design = des_eusilc0, alpha=.20,
ncom=nrow(dataset1), comp=TRUE, incvec= dataset1$eqIncome,deff=FALSE, keep.var=FALSE)
test_gini_dom<-svyby(~eqIncome, by=~db040, FUN=svygini, design = des_eusilc0,
ncom=nrow(dataset1), comp=TRUE,deff=FALSE, keep.var=FALSE)
se_arpt_dom <- SE_lin(test_arpt_dom,des_eusilc0)
se_arpt_dom <- convey:::SE_lin(test_arpt_dom,des_eusilc0)
se_arpt_dom
se_arpr_dom <- convey:::SE_lin(test_arpr_dom,des_eusilc0)
se_rmpg_dom <- convey:::SE_lin(test_rmpg_dom,des_eusilc0)
se_qsr_dom <- convey:::SE_lin(test_qsr_dom,des_eusilc0)
se_gini_dom <- convey:::SE_lin(test_gini_dom,des_eusilc0)
length(se_arpt_dom)
frame_arpt<- data.frame(domain=test_arpt_dom$db040, type= rep("arpt",length(se_arpt_dom)),
value= test_arpt_dom$statistic.value, se=se_arpt_dom)
test_arpt_dom$db040
rep("arpt",length(se_arpt_dom)
rep("arpt",length(se_arpt_dom))
length(se_arpt_dom)
rep("arpt",length(se_arpt_dom))
test_arpt_dom$statistic.value
unlist(test_arpt_dom$statistic.value)
se_arpt_dom
data.frame(domain=test_arpt_dom$db040, type= rep("arpt",length(se_arpt_dom)),
value= unlist(test_arpt_dom$statistic.value), se=unlist(se_arpt_dom))
frame_arpr<- data.frame(domain=test_arpr_dom$db040, type= rep("arpr",length(se_arpr_dom)),
value= unlist(test_arpr_dom$statistic.value), se=unlist(se_arpr_dom))
frame_arpr<- data.frame(domain=test_arpr_dom$db040, type= rep("arpr",length(se_arpr_dom)),
value= unlist(test_arpr_dom$statistic.value), se=unlist(se_arpr_dom))
frame_arpr
frame_arpt
frame_arpt<- data.frame(domain=test_arpt_dom$db040, type= rep("arpt",length(se_arpt_dom)),
value= unlist(test_arpt_dom$statistic.value), se=unlist(se_arpt_dom))
frame_arpt
frame_arpr<- data.frame(domain=test_arpr_dom$db040, type= rep("arpr",length(se_arpr_dom)),
value= unlist(test_arpr_dom$statistic.value), se=unlist(se_arpr_dom))
frame_arpr
frame_rmpg<- data.frame(domain=test_rmpg_dom$db040, type= rep("rmpg",length(se_rmpg_dom)),
value= unlist(test_rmpg_dom$statistic.value), se=unlist(se_rmpg_dom))
frame_rmpg
frame_qsr<- data.frame(domain=test_qsr_dom$db040, type= rep("qsr",length(se_arpr_dom)),
value= unlist(test_qsr_dom$statistic.value), se=unlist(se_qsr_dom))
frame_qsr
frame_gini<- data.frame(domain=test_gini_dom$db040, type= rep("gini",length(se_gini_dom)),
value= unlist(test_gini_dom$statistic.value), se=unlist(se_gini_dom))
frame_gini
frame_gini<- data.frame(domain=test_gini_dom$db040, type= rep("gini",length(se_gini_dom)),
value= unlist(test_gini_dom$statistic.value), se=unlist(se_gini_dom))
se_gini_dom
test_gini_dom$db040
rep("gini",length(se_gini_dom)
rep("gini",length(se_gini_dom))
se_gini_dom
rep("gini",length(se_gini_dom))
unlist(test_gini_dom$statistic.value)
test_gini_dom<-svyby(~eqIncome, by=~db040, FUN=svygini, design = des_eusilc0,
ncom=nrow(dataset1), comp=TRUE,deff=FALSE, keep.var=FALSE)
se_gini_dom <- convey:::SE_lin(test_gini_dom,des_eusilc0)
frame_gini<- data.frame(domain=test_gini_dom$db040, type= rep("gini",length(se_gini_dom)),
value= unlist(test_gini_dom$statistic.value), se=unlist(se_gini_dom))
str(test_gini_dom)
se_gini_dom <- convey:::SE_lin(test_gini_dom,des_eusilc0)
frame_gini<- data.frame(domain=test_gini_dom$db040, type= rep("gini",length(se_gini_dom)),
value= unlist(test_gini_dom$statistic.value), se=unlist(se_gini_dom))
unlist(se_gini_dom)
test_gini_dom$db040
length(se_gini_dom)
test_gini_dom$statistic.value
frame_gini<- data.frame(domain=test_gini_dom$db040, type= rep("gini",length(se_gini_dom)),
value= unlist(test_gini_dom$statistic.gini_coef), se=unlist(se_gini_dom))
frame_gini
res_vardpoor_se
table(res_vardpoor_se$type)
subset(res_vardpoor_se, type="ARPR")
subset(res_vardpoor_se, type=="ARPR")
frame_arpt
subset(res_vardpoor_se, type=="ARPT")
frame_arpr
subset(res_vardpoor_se, type=="ARPR")
frame_qsr
subset(res_vardpoor_se, type=="QSR")
aa$all_result$value
aa<-varpoord(Y = "eqIncome", w_final = "rb050",
Y_thres = NULL, wght_thres = NULL,
ID_household = "db030", id = "IDd",
H = "db040", PSU = "rb030", N_h = NULL,
sort = NULL, Dom = NULL,
gender = NULL, X = NULL,
X_ID_household = NULL, g = NULL,
datasetX = NULL,
q = rep(1, if (is.null(datasetX))
nrow(as.data.frame(H)) else nrow(datasetX)),
dataset =  dataset1, percentage=60, order_quant=50,
alpha = 20, confidence = .95, outp_lin = FALSE,
outp_res = FALSE, several.ok=FALSE, type="linarpt")
aa$all_result$value
aa$all_result$se
aa<-varpoord(Y = "eqIncome", w_final = "rb050",
Y_thres = NULL, wght_thres = NULL,
ID_household = "db030", id = "IDd",
H = "db040", PSU = "rb030", N_h = NULL,
sort = NULL, Dom = NULL,
gender = NULL, X = NULL,
X_ID_household = NULL, g = NULL,
datasetX = NULL,
q = rep(1, if (is.null(datasetX))
nrow(as.data.frame(H)) else nrow(datasetX)),
dataset =  dataset1, percentage=60, order_quant=50,
alpha = 20, confidence = .95, outp_lin = FALSE,
outp_res = FALSE, several.ok=FALSE, type="linarpt")
data(eusilc)
dataset <- data.frame(1:nrow(eusilc),eusilc)
colnames(dataset)[1] <- "IDd"
dataset1 <- dataset[1:1000,]
aa<-varpoord(Y = "eqIncome", w_final = "rb050",
Y_thres = NULL, wght_thres = NULL,
ID_household = "db030", id = "IDd",
H = "db040", PSU = "rb030", N_h = NULL,
sort = NULL, Dom = NULL,
gender = NULL, X = NULL,
X_ID_household = NULL, g = NULL,
datasetX = NULL,
q = rep(1, if (is.null(datasetX))
nrow(as.data.frame(H)) else nrow(datasetX)),
dataset =  dataset1, percentage=60, order_quant=50,
alpha = 20, confidence = .95, outp_lin = FALSE,
outp_res = FALSE, several.ok=FALSE, type="linarpt")
aa$all_result$value
aa$all_result$se
test_arpt$value
convey:::SE_lin(test_arpt, des_eusilc0 )
data(eusilc)
dataset <- data.frame(1:nrow(eusilc),eusilc)
colnames(dataset)[1] <- "IDd"
dataset1 <- dataset[1:1000,]
aa1 <-varpoord(Y = "eqIncome", w_final = "rb050",
Y_thres = NULL, wght_thres = NULL,
ID_household = "db030", id = "IDd",
H = "db040", PSU = "rb030", N_h = NULL,
sort = NULL, Dom = "db040",
gender = NULL, X = NULL,
X_ID_household = NULL, g = NULL,
datasetX = NULL,
q = rep(1, if (is.null(datasetX))
nrow(as.data.frame(H)) else nrow(datasetX)),
dataset =  dataset1, percentage=60, order_quant=50,
alpha = 20, confidence = .95, outp_lin = FALSE,
outp_res = FALSE, several.ok=FALSE, type="linarpt")
aa1$all_result$value
aa1$all_result$se
test_arpt_dom<-svyby(~eqIncome, by=~db040, FUN=svyarpt, design = des_eusilc0, .5, .6,
h=htot, ncom=nrow(dataset1), comp=TRUE, deff=FALSE, keep.var=FALSE)
test_arpt_dom$statistic.value
unlist(test_arpt_dom$statistic.value)
aa1$all_result$value
unlist(convey:::SE_lin(test_arpt_dom, des_eusilc0 ))
aa1$all_result$se
frame_arpt
subset(res_vardpoor_se, type=="ARPT")
library(devtools)
install_github("djalmapessoa/convey")
library(convey)
library(convey)
search()
source('~/GitHub/convey/tests.R', echo=TRUE)
res_vardpoor_arpt<- res_vardpoor_arpt[,c("type","db040","value", "se")]
res_vardpoor_arpt
res_vardpoor_se
res_vardpoor_se<- res_vardpoor_se[,c("type","db040","value", "se")]
as.data.frame(aa2$all_result)-> res_vardpoor_se
aa2 <- varpoord(Y = "eqIncome", w_final = "rb050",
Y_thres = NULL, wght_thres = NULL,
ID_household = "db030", id = "IDd",
H = "db040", PSU = "rb030", N_h = NULL,
sort = NULL, Dom = "db040",
gender = NULL, X = NULL,
X_ID_household = NULL, g = NULL,
datasetX = NULL,
q = rep(1, if (is.null(datasetX))
nrow(as.data.frame(H)) else nrow(datasetX)),
dataset =  dataset, percentage=60, order_quant=50,
alpha = 20, confidence = .95, outp_lin = TRUE,
outp_res = TRUE, several.ok=FALSE, type="all_choices")
aa2$all_result$value
as.data.frame(aa2$all_result)-> res_vardpoor_se
res_vardpoor_se<- res_vardpoor_se[,c("type","db040","value", "se")]
as.data.frame(aa2$all_result)-> res_vardpoor_all
res_vardpoor_all<- res_vardpoor_se[,c("type","db040","value", "se")]
subset(res_vardpoor_all,type=="ARPT")
res_vardpoor_arpt<- res_vardpoor_arpt[,c("type","db040","value", "se")]
res_vardpoor_arpt
aa1$all_result[, c("value", "se")]
as.data.frame(as.data.frame(aa1$all_result))[,c("type","db040","value", "se")]
subset(as.data.frame(aa2$all_result)[,c("type","db040","value", "se")],type=="ARPT")
library(vardpoor)
data(eusilc)
dataset <- data.frame(1:nrow(eusilc),eusilc)
colnames(dataset)[1] <- "IDd"
dataset1 <- dataset[1:1000,]
# Example 2:  arpt
aa1 <-varpoord(Y = "eqIncome", w_final = "rb050",
Y_thres = NULL, wght_thres = NULL,
ID_household = "db030", id = "IDd",
H = "db040", PSU = "rb030", N_h = NULL,
sort = NULL, Dom = "db040",
gender = NULL, X = NULL,
X_ID_household = NULL, g = NULL,
datasetX = NULL,
q = rep(1, if (is.null(datasetX))
nrow(as.data.frame(H)) else nrow(datasetX)),
dataset =  dataset1, percentage=60, order_quant=50,
alpha = 20, confidence = .95, outp_lin = FALSE,
outp_res = FALSE, several.ok=FALSE, type="linarpt")
# results
as.data.frame(as.data.frame(aa1$all_result))[,c("type","db040","value", "se")]
# example 3: all indicators
aa2 <- varpoord(Y = "eqIncome", w_final = "rb050",
Y_thres = NULL, wght_thres = NULL,
ID_household = "db030", id = "IDd",
H = "db040", PSU = "rb030", N_h = NULL,
sort = NULL, Dom = "db040",
gender = NULL, X = NULL,
X_ID_household = NULL, g = NULL,
datasetX = NULL,
q = rep(1, if (is.null(datasetX))
nrow(as.data.frame(H)) else nrow(datasetX)),
dataset =  dataset, percentage=60, order_quant=50,
alpha = 20, confidence = .95, outp_lin = TRUE,
outp_res = TRUE, several.ok=FALSE, type="all_choices")
# result
subset(as.data.frame(aa2$all_result)[,c("type","db040","value", "se")],type=="ARPT")
# why are not the same
subset(as.data.frame(aa2$all_result)[,c("type","db040","value", "se")],type=="ARPT")
library(adacr)
# example of function variance_est in library vardpoor
library(vradpoor)
Ys<- rchisq(10,3)
ws<- rep(2,10)
PSU<-1:length(Ys)
H<- rep("Strata_1",10)
strwor.var(H, Ys*ws)
strwor.var(H, Ys*w)
strwr.var(H, Ys*w)
strwr.var(est=H, z=Ys*w)
library(adacr)
library(adacr)
set.seed(1)
Ys <- rchisq(10, 3)
w <- rep(2, 10)
PSU <- 1:length(Ys)
H <- rep("Strata_1", 10)
strwr.var(est=H, z=Ys*w)
data<- data.frame(Y=Ys, H=H, w=w, PSU=PSU, fpc=1/w)
des<- svydesign(id=~PSU, strata=~H, weights =~w, fpc= ~fpc, data= data)
vcov(svytotal(~Y, des))
res_vardpoor_se
source('~/GitHub/convey/tests.R', echo=TRUE)
library(convey)
source('~/GitHub/convey/tests.R', echo=TRUE)
fin_pop_corr<- subset(dataset1,select = c("db040","rb050"))
fin_pop_corr<- aggregate(fin_pop_corr,db040=list(dataset1$db040), sum)
fin_pop_corr<- aggregate(fin_pop_corr,db040=list(dataset1$db040),FUN= sum)
fin_pop_corr<- subset(dataset1, by=select = c("db040","rb050"))
fin_pop_corr<- aggregate(fin_pop_corr,list(db040=dataset1$db040),FUN= sum)
fin_pop_corr<- aggregate(fin_pop_corr[,2],list(db040=dataset1$db040),FUN= sum)
fin_pop_corr
N_h<- aggregate(fin_pop_corr[,2],list(db040=dataset1$db040),FUN= sum)
fin_pop_corr<- subset(dataset1,select = c("db040","rb050"))
N_h <- aggregate(fin_pop_corr[,2],list(db040=dataset1$db040),FUN= sum)
N_h <- aggregate(dataset1[,"rb050"],list(db040=dataset1$db040),FUN= sum)
N_h
n_h<- aggregate(dataset1[,"rb050"],list(db040=dataset1$db040),FUN= length)
n_h
N_h <- aggregate(dataset1[,"rb050"],list(db040=dataset1$db040),FUN= sum)
N_h
?aggregate
names(N_h)[2]<-"Nh"
<- aggregate(dataset1[,"rb050"],list(db040=dataset1$db040),FUN= sum)
N_h
names(n_h)[2]<-"nh"
f_h<-merge(N_h,n_h)
f_h
f_h<- transform(f_h, fh=nh/Nh)
f_h
dataset1<- merge(datase1, f_h)
dataset1<- merge(dataset1, f_h)
names(dataset1)
des_eusilc0<- svydesign(id=~rb030, strata = ~db040, weights = ~rb050,
data = dataset1, fpc = ~fpc, nest = TRUE)
des_eusilc0<- svydesign(id=~rb030, strata = ~db040, weights = ~rb050,
data = dataset1, fpc = ~fh, nest = TRUE)
test_arpt<-svyarpt(~eqIncome, des_eusilc0, .5, .6, h=htot, ncom=nrow(dataset1), comp=TRUE )
test_arpt$value
aa$all_result$value
htot <- h_fun(dataset1$eqIncome, dataset1$rb050)
test_arpt$value
SE_lin(test_arpt, des_eusilc0 )
aa$all_result$se
htot <- h_fun(eusilc$eqIncome, eusilc$rb050)
test_arpt<-svyarpt(~eqIncome, des_eusilc0, .5, .6, h=htot, ncom=nrow(dataset1), comp=TRUE )
test_arpt$value
SE_lin(test_arpt, des_eusilc0 )
aa$all_result$se
htot <- h_fun(dataset1$eqIncome, dataset1$rb050)
test_arpt<-svyarpt(~eqIncome, des_eusilc0, .5, .6, h=htot, ncom=nrow(dataset1), comp=TRUE )
SE_lin(test_arpt, des_eusilc0 )
des_eusilc0<- svydesign(id=~rb030, strata = ~db040, weights = ~rb050,
data = dataset1, nest = TRUE)
SE_lin(test_arpt, des_eusilc0 )
aa$all_result$se
aa$all_result$se
des_eusilc0<- svydesign(id=~rb030, strata = ~db040, weights = ~rb050,
data = dataset1, fpc=~I(nh/Nh) nest = TRUE)
des_eusilc0<- svydesign(id=~rb030, strata = ~db040, weights = ~rb050,
data = dataset1, fpc=~I(nh/Nh), nest = TRUE)
test_arpt<-svyarpt(~eqIncome, des_eusilc0, .5, .6, h=htot, ncom=nrow(dataset1), comp=TRUE )
SE_lin(test_arpt, des_eusilc0 )
##  indicator arpt, domains
aa$all_result$se
aa$all_result$se
SE_lin(test_arpt, des_eusilc0 )
as.data.frame(as.data.frame(aa1$all_result))[,c("type","db040","value", "se")]
test_arpt_dom1<-svyby(~eqIncome, by=~db040, FUN=svyarpt, design = des_eusilc0, .5, .6,
h=htot, ncom=nrow(dataset1), comp=TRUE, deff=FALSE, keep.var=FALSE)
se_arpt_dom1 <- SE_lin(test_arpt_dom1,des_eusilc0)
# show resuts from convey
res_convey_arpt<- data.frame(domain=test_arpt_dom1$db040, type= rep("arpt",length(se_arpt_dom1)),
value= unlist(test_arpt_dom1$statistic.value), se=unlist(se_arpt_dom1))
res_convey_arpt
dataset1<- eusilc[1:1000,]
# introduce fpc in the design object:
N_h <- aggregate(dataset1[,"rb050"],list(db040=dataset1$db040),FUN= sum)
names(N_h)[2]<-"Nh"
n_h<- aggregate(dataset1[,"rb050"],list(db040=dataset1$db040),FUN= length)
names(n_h)[2]<-"nh"
f_h<-merge(N_h,n_h)
dataset1<-merge(dataset1,f_h)
des_eusilc0<- svydesign(id=~rb030, strata = ~db040, weights = ~rb050,
data = dataset1, fpc=~I(nh/Nh), nest = TRUE)
# estimate bandwdth using the whole sample
htot <- h_fun(dataset1$eqIncome, dataset1$rb050)
test_arpt<-svyarpt(~eqIncome, des_eusilc0, .5, .6, h=htot, ncom=nrow(dataset1), comp=TRUE )
#show results from convey
# arpt estimate
test_arpt$value
# se of the arpt estimate
SE_lin(test_arpt, des_eusilc0 )
as.data.frame(as.data.frame(aa1$all_result))[,c("type","db040","value", "se")]
test_arpt_dom1<-svyby(~eqIncome, by=~db040, FUN=svyarpt, design = des_eusilc0, .5, .6,
h=htot, ncom=nrow(dataset1), comp=TRUE, deff=FALSE, keep.var=FALSE)
se_arpt_dom1 <- SE_lin(test_arpt_dom1,des_eusilc0)
# show resuts from convey
res_convey_arpt<- data.frame(domain=test_arpt_dom1$db040, type= rep("arpt",length(se_arpt_dom1)),
value= unlist(test_arpt_dom1$statistic.value), se=unlist(se_arpt_dom1))
res_convey_arpt
N_h <- aggregate(eusilc[,"rb050"],list(db040=eusilc$db040),FUN= sum)
names(N_h)[2]<-"Nh"
n_h<- aggregate(eusilc[,"rb050"],list(db040=eusilc$db040),FUN= length)
names(n_h)[2]<-"nh"
f_h<-merge(N_h,n_h)
eusilc<-merge(eusilc,f_h)
des_eusilc<- svydesign(id=~rb030, strata = ~db040, weights = ~rb050,
data = eusilc, fpc=~I(nh/Nh) nest = TRUE)
htot <- h_fun(eusilc$eqIncome, eusilc$rb050)
arptw<- svyarpt(~eqIncome, design=des_eusilc, .5, .6, h=htot,
ncom=nrow(des_eusilc$variables), comp=TRUE)
des_eusilc<- svydesign(id=~rb030, strata = ~db040, weights = ~rb050,
data = eusilc, fpc=~I(nh/Nh), nest = TRUE)
htot <- h_fun(eusilc$eqIncome, eusilc$rb050)
arptw<- svyarpt(~eqIncome, design=des_eusilc, .5, .6, h=htot,
ncom=nrow(des_eusilc$variables), comp=TRUE)
test_arpt_dom<-svyby(~eqIncome, by=~db040, FUN=svyarpt, design = des_eusilc, order=.5,
percent=.6, h=htot, ncom=nrow(eusilc), comp=TRUE, deff=FALSE, keep.var=FALSE)
se_arpt_dom <- SE_lin(test_arpt_dom,des_eusilc)
# organize results for arpt
frame_arpt<- data.frame(domain=test_arpt_dom$db040, type= rep("arpt",length(se_arpt_dom)),
value= unlist(test_arpt_dom$statistic.value), se=unlist(se_arpt_dom))
test_arpt_dom<-svyby(~eqIncome, by=~db040, FUN=svyarpt, design = des_eusilc, order=.5,
percent=.6, h=htot, ncom=nrow(eusilc), comp=TRUE, deff=FALSE, keep.var=FALSE)
se_arpt_dom <- SE_lin(test_arpt_dom,des_eusilc)
# organize results for arpt
frame_arpt<- data.frame(domain=test_arpt_dom$db040, type= rep("arpt",length(se_arpt_dom)),
value= unlist(test_arpt_dom$statistic.value), se=unlist(se_arpt_dom))
# arpr domains
test_arpr_dom<-svyby(~eqIncome, by=~db040, FUN=svyarpr, design = des_eusilc, order=.5,
percent=.6,  h=htot, ARPT=arptw, ncom=nrow(eusilc), comp=TRUE, deff=FALSE, keep.var=FALSE)
se_arpr_dom <- SE_lin(test_arpr_dom,des_eusilc)
# organize results for arpr
frame_arpr<- data.frame(domain=test_arpr_dom$db040, type= rep("arpr",length(se_arpr_dom)),
value= unlist(test_arpr_dom$statistic.value), se=unlist(se_arpr_dom))
# rmpg domains
test_rmpg_dom<-svyby(~eqIncome, by=~db040, FUN=svyrmpg, design = des_eusilc, order=.5,
percent=.6, h=htot, ncom=nrow(eusilc), comp=TRUE, ARPT=test_arpt, deff=FALSE, keep.var=FALSE)
se_rmpg_dom <- SE_lin(test_rmpg_dom,des_eusilc)
# organize results for rmpg
frame_rmpg<- data.frame(domain=test_rmpg_dom$db040, type= rep("rmpg",length(se_rmpg_dom)),
value= unlist(test_rmpg_dom$statistic.value), se=unlist(se_rmpg_dom))
# qsr domains
test_qsr_dom<-svyby(~eqIncome, by=~db040, FUN=svyqsr, design = des_eusilc, alpha=.20,
ncom=nrow(eusilc), comp=TRUE, incvec= eusilc$eqIncome,deff=FALSE, keep.var=FALSE)
se_qsr_dom <- SE_lin(test_qsr_dom,des_eusilc)
# organize results for qsr
frame_qsr<- data.frame(domain=test_qsr_dom$db040, type= rep("qsr",length(se_arpr_dom)),
value= unlist(test_qsr_dom$statistic.value), se=unlist(se_qsr_dom))
# gini domains
test_gini_dom<-svyby(~eqIncome, by=~db040, FUN=svygini, design = des_eusilc,
ncom=nrow(eusilc), comp=TRUE,deff=FALSE, keep.var=FALSE)
se_gini_dom <- SE_lin(test_gini_dom,des_eusilc)
# organize results for gini
frame_gini<- data.frame(domain=test_gini_dom$db040, type= rep("gini",length(se_gini_dom)),
value= unlist(test_gini_dom$statistic.gini_coef), se=unlist(se_gini_dom))
frame_arpt
subset(as.data.frame(aa2$all_result)[,c("type","db040","value", "se")],type=="ARPT")
frame_arpr
subset(as.data.frame(aa2$all_result)[,c("type","db040","value", "se")],type=="ARPR")
frame_qsr
subset(as.data.frame(aa2$all_result)[,c("type","db040","value", "se")],type=="QSR")
frame_gini
subset(as.data.frame(aa2$all_result)[,c("type","db040","value", "se")],type=="GINI")
set.seed(1)
Y <- matrix(rchisq(10, 3), 10, 1)
X <- matrix(rchisq(20, 3), 10, 2)
w <- rep(2, 10)
q <- rep(1, 10)
residual_est(Y, X, w, q)
Y <- matrix(rchisq(10, 3), 10, 1)
X <- matrix(c(rchisq(10, 2), rchisq(10, 2) + 10), 10, 2)
w <- rep(2, 10)
q <- rep(1, 10)
residual_est(Y, X, w, q)
as.matrix(lm(Y ~ X - 1, weights = w * q)$residuals)
paste0(x,1:10)
x<-1:10
n<-20
names(x)<-paste0(x,1:10)
names(x)
names(x)<-paste0("X",1:10)
names(x)
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
rchisq(10,3)
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
a
x<-c(1,3,5)
names(x)<-as.character(1:3)
n<-10
a<- complete(x,n)
a
which(a!=0)
names(x)
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
a<-icdf(~Y, des, 3, 10, comp=TRUE)
set.seed(1)
Y<- rchisq(10,3)
H<- rep("str1",10)
PSU<-1:10
w<- rep(2,10)
test<- data.frame(Y=Y, H=H, PSU=PSU, w=w)
des<- svydesign(id=~PSU, strata = ~H, weights=w, data=test)
a<-icdf(~Y, des, 3, 10, comp=TRUE)
str(a)
class(a$lin)
devtools::test()
devtools::test()
devtools::test()
