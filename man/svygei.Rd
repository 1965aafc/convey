% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/svygei.R
\name{svygei}
\alias{svygei}
\alias{svygei.DBIsvydesign}
\alias{svygei.survey.design}
\alias{svygei.svyrep.design}
\title{Generalized entropy index}
\usage{
svygei(formula, design, ...)

\method{svygei}{survey.design}(formula, design, epsilon = 1, na.rm = FALSE,
  ...)

\method{svygei}{svyrep.design}(formula, design, epsilon = 1, na.rm = FALSE,
  ...)

\method{svygei}{DBIsvydesign}(formula, design, ...)
}
\arguments{
\item{formula}{a formula specifying the income variable}

\item{design}{a design object of class \code{survey.design} or class \code{svyrep.design} from the \code{survey} library.}

\item{epsilon}{a parameter that determines the sensivity towards inequality in the top of the distribution. Defaults to epsilon = 1.}

\item{na.rm}{Should cases with missing values be dropped?}
}
\value{
Object of class "\code{cvystat}", which are vectors with a "\code{var}" attribute giving the variance and a "\code{statistic}" attribute giving the name of the statistic.
}
\description{
Estimate the generalized entropy index, a measure of inequality
}
\details{
you must run the \code{convey_prep} function on your survey design object immediately after creating it with the \code{svydesign} or \code{svrepdesign} function.

If \code{epsilon == 0} or \code{epsilon == 1}, the logarithm in the function only allows for strictly positive variables.
}
\examples{
library(survey)
library(vardpoor)
data(eusilc) ; names( eusilc ) <- tolower( names( eusilc ) )

# linearized design
des_eusilc <- svydesign( ids = ~rb030 , strata = ~db040 ,  weights = ~rb050 , data = eusilc )
library(convey)
des_eusilc <- convey_prep(des_eusilc)

# replicate-weighted design
des_eusilc_rep <- survey:::as.svrepdesign( des_eusilc , type = "bootstrap" )

# database-backed design
require(RSQLite)
tfile <- tempfile()
conn <- dbConnect( SQLite() , tfile )
dbWriteTable( conn , 'eusilc' , eusilc )

dbd_eusilc <- svydesign(ids = ~rb030 , strata = ~db040 ,  weights = ~rb050 , data="eusilc", dbname=tfile, dbtype="SQLite")
dbd_eusilc <- convey_prep( dbd_eusilc )

# linearized design
svygei( ~eqincome , design = subset(des_eusilc, eqincome > 0), epsilon = 0 )
svygei( ~eqincome , design = des_eusilc, epsilon = .5 )
svygei( ~eqincome , design = subset(des_eusilc, eqincome > 0), epsilon = 1 )
svygei( ~eqincome , design = des_eusilc, epsilon = 2 )

# database-backed linearized design
svygei( ~eqincome , design = subset(dbd_eusilc, eqincome > 0), epsilon = 0 )
svygei( ~eqincome , design = dbd_eusilc, epsilon = .5 )
svygei( ~eqincome , design = subset(dbd_eusilc, eqincome > 0), epsilon = 1 )
svygei( ~eqincome , design = dbd_eusilc, epsilon = 2 )

# replicate-weighted design
svygei( ~eqincome , design = subset(des_eusilc_rep, eqincome > 0), epsilon = 0 )
svygei( ~eqincome , design = des_eusilc_rep, epsilon = .5 )
svygei( ~eqincome , design = subset(des_eusilc_rep, eqincome > 0), epsilon = 1 )
svygei( ~eqincome , design = des_eusilc_rep, epsilon = 2 )


# linearized design using a variable with missings
svygei( ~py010n , design = subset(des_eusilc, py010n > 0 | is.na(py010n)), epsilon = 0 )
svygei( ~py010n , design = subset(des_eusilc, py010n > 0 | is.na(py010n)), epsilon = 0, na.rm = TRUE )
svygei( ~py010n , design = des_eusilc, epsilon = .5 )
svygei( ~py010n , design = des_eusilc, epsilon = .5, na.rm = TRUE )
svygei( ~py010n , design = subset(des_eusilc, py010n > 0 | is.na(py010n)), epsilon = 1 )
svygei( ~py010n , design = subset(des_eusilc, py010n > 0 | is.na(py010n)), epsilon = 1, na.rm = TRUE )
svygei( ~py010n , design = des_eusilc, epsilon = 2 )
svygei( ~py010n , design = des_eusilc, epsilon = 2, na.rm = TRUE )

# database-backed linearized design using a variable with missings
svygei( ~py010n , design = subset(dbd_eusilc, py010n > 0 | is.na(py010n)), epsilon = 0 )
svygei( ~py010n , design = subset(dbd_eusilc, py010n > 0 | is.na(py010n)), epsilon = 0, na.rm = TRUE )
svygei( ~py010n , design = dbd_eusilc, epsilon = .5 )
svygei( ~py010n , design = dbd_eusilc, epsilon = .5, na.rm = TRUE )
svygei( ~py010n , design = subset(dbd_eusilc, py010n > 0 | is.na(py010n)), epsilon = 1 )
svygei( ~py010n , design = subset(dbd_eusilc, py010n > 0 | is.na(py010n)), epsilon = 1, na.rm = TRUE )
svygei( ~py010n , design = dbd_eusilc, epsilon = 2 )
svygei( ~py010n , design = dbd_eusilc, epsilon = 2, na.rm = TRUE )

# replicate-weighted design using a variable with missings
svygei( ~py010n , design = subset(des_eusilc_rep, py010n > 0 | is.na(py010n)), epsilon = 0 )
svygei( ~py010n , design = subset(des_eusilc_rep, py010n > 0 | is.na(py010n)), epsilon = 0, na.rm = TRUE )
svygei( ~py010n , design = des_eusilc_rep, epsilon = .5 )
svygei( ~py010n , design = des_eusilc_rep, epsilon = .5, na.rm = TRUE )
svygei( ~py010n , design = subset(des_eusilc_rep, py010n > 0 | is.na(py010n)), epsilon = 1 )
svygei( ~py010n , design = subset(des_eusilc_rep, py010n > 0 | is.na(py010n)), epsilon = 1, na.rm = TRUE )
svygei( ~py010n , design = des_eusilc_rep, epsilon = 2 )
svygei( ~py010n , design = des_eusilc_rep, epsilon = 2, na.rm = TRUE )


}
\author{
Djalma Pessoa, Anthony Damico and Guilherme Jacob
}
\references{
Matti Langel (2012). Measuring inequality in finite population sampling.
PhD thesis: Université de Neuchâtel,
URL \url{https://doc.rero.ch/record/29204/files/00002252.pdf}.

Martin Biewen and Stephen Jenkins (2002). Estimation of Generalized Entropy
and Atkinson Inequality Indices from Complex Survey Data. \emph{DIW Discussion Papers},
No.345,
URL \url{https://www.diw.de/documents/publikationen/73/diw_01.c.40394.de/dp345.pdf}.
}
\seealso{
\code{\link{svyatk}}
}
\keyword{survey}

